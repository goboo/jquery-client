{"version":3,"sources":["jquery.gobooSlotDetails.js","jquery.gobooBookingMask.js","jquery.gobooCalendar.js"],"names":[],"mappings":"CAqBA,SAAA,GACA,YAEA,GAAA,oBACA,EAAA,iBAAA,gBAEA,KAAA,GAEA,KAAA,GAEA,aAAA,EAGA,oBAAA,mBAEA,kBAAA,GAEA,WAAA,uBAEA,uBAAA,QAEA,uBAAA,QAGA,WAAA,oBAEA,sBAAA,gCAEA,oBAAA,8BAEA,iBAAA,0BAEA,iBAAA,2BAEA,iBAAA,0BAEA,mBAAA,4BAEA,cAAA,uBAGA,aAAA,sBAEA,yBAAA,mCAEA,yBAAA,oCAGA,mBAAA,qBAEA,YAAA,SAAA,GACA,MAAA,IAEA,uBAAA,SAAA,EAAA,EAAA,GACA,MAAA,GAAA,eAAA,EAAA,oBAAA,IAEA,qBAAA,SAAA,EAAA,EAAA,GACA,MAAA,GAAA,eAAA,EAAA,kBAAA,IAEA,kBAAA,SAAA,GACA,MAAA,MAAA,MAAA,IAEA,kBAAA,SAAA,GACA,MAAA,MAAA,MAAA,IAEA,kBAAA,SAAA,GACA,MAAA,IAEA,oBAAA,SAAA,GACA,MAAA,IAEA,eAAA,SAAA,EAAA,GACA,GAAA,MAEA,EAAA,CAwBA,OAvBA,GAAA,KAAA,EAAA,SAAA,EAAA,IACA,OAAA,EAAA,oBAAA,EAAA,iBAAA,EAAA,sBACA,OAAA,EAAA,oBAAA,EAAA,iBAAA,EAAA,sBACA,EAAA,KAAA,IAAA,EAAA,WAAA,MAGA,EAAA,KAAA,EAAA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,iBACA,KAAA,QAAA,EAAA,kBACA,KAAA,mBAAA,EAAA,YACA,KAAA,EAAA,WAEA,QAAA,EAAA,oBAAA,EAAA,gBAAA,EAAA,oBACA,OAAA,EAAA,oBAAA,EAAA,gBAAA,EAAA,mBACA,EAAA,SAAA,sBAEA,EAAA,GAAA,EAAA,YAAA,GACA,EAAA,SAAA,uBAGA,EAAA,KAAA,EAAA,IAAA,MAGA,GAEA,cAAA,SAAA,EAAA,GACA,MAAA,GAAA,iBAAA,EAAA,WAAA,EAAA,IAEA,0BAAA,SAAA,EAAA,EAAA,GACA,GAAA,GAAA,SAAA,EAAA,IACA,EAAA,EAAA,GACA,EAAA,GAAA,KAKA,OAJA,GAAA,QAAA,GACA,EAAA,SAAA,GACA,EAAA,WAAA,GACA,EAAA,WAAA,GACA,EAAA,eAAA,EAAA,uBAAA,IAEA,0BAAA,SAAA,EAAA,EAAA,GACA,GAAA,GAAA,SAAA,EAAA,IACA,EAAA,EAAA,GACA,EAAA,GAAA,KAKA,OAJA,GAAA,QAAA,GACA,EAAA,SAAA,GACA,EAAA,WAAA,GACA,EAAA,WAAA,GACA,EAAA,eAAA,EAAA,uBAAA,IAEA,iBAAA,SAAA,EAAA,EAAA,GAIA,IAHA,GAEA,GAFA,KACA,EAAA,UAEA,MAAA,EAAA,EAAA,OAAA,KAAA,CACA,GAAA,GAAA,EAAA,OAAA,EAAA,EACA,GAAA,EAAA,OAAA,GAEA,GACA,EAAA,KAAA,SAAA,eAAA,IAGA,EAAA,EAAA,OAAA,IACA,IAAA,GAAA,EAAA,UAAA,EAAA,GACA,EAAA,EAAA,eAAA,EAAA,EAAA,EACA,GAAA,QAAA,GACA,EAAA,KAAA,EAAA,SAAA,EAAA,GACA,EAAA,KAAA,KAIA,EAAA,KAAA,SAAA,eAAA,IAGA,EAAA,EAAA,OAAA,EAAA,GAOA,MAJA,IACA,EAAA,KAAA,SAAA,eAAA,IAGA,GAEA,eAAA,SAAA,EAAA,EAAA,GACA,OAAA,GACA,IAAA,KACA,MAAA,GAAA,YAAA,EAAA,QAAA,EAAA,EAEA,KAAA,QACA,IAAA,gBACA,MAAA,GAAA,uBAAA,EAAA,mBAAA,EAAA,EAEA,KAAA,MACA,IAAA,cACA,MAAA,GAAA,qBAAA,EAAA,iBAAA,EAAA,EAEA,KAAA,WACA,MAAA,GAAA,kBAAA,EAAA,cAAA,EAAA,EAEA,KAAA,WACA,MAAA,GAAA,kBAAA,EAAA,eAAA,EAAA,cAAA,EAAA,EAEA,KAAA,mBACA,MAAA,GAAA,0BAAA,EAAA,cAAA,EAAA,EAEA,KAAA,mBACA,MAAA,GAAA,0BAAA,EAAA,eAAA,EAAA,cAAA,EAAA,EAEA,KAAA,WACA,MAAA,GAAA,kBAAA,EAAA,cAAA,EAAA,EAEA,KAAA,aACA,MAAA,GAAA,oBAAA,EAAA,gBAAA,EAAA,EAEA,KAAA,QACA,IAAA,iBACA,MAAA,GAAA,eAAA,EAAA,oBAAA,EAAA,EAEA,SACA,GAAA,GAAA,EAAA,WACA,IAAA,EAAA,GACA,MAAA,GAAA,GAAA,EAAA,EAEA,MAAA,+BAAA,EAAA,8BAIA,gBAAA,WACA,MAAA,wDAGA,UAAA,aAEA,WAAA,WACA,GAAA,GAAA,KAAA,UAAA,KAAA,iBAEA,IAAA,EAAA,OAAA,CACA,GAAA,GAAA,GAAA,EAAA,KAAA,QACA,GAAA,EAAA,QAAA,0BAAA,IACA,EAAA,EAAA,QAAA,oBAAA,IACA,EAAA,KAAA,QAAA,GACA,EACA,SAAA,uBAAA,KAAA,YAAA,eACA,SAAA,iBAAA,KAAA,YAAA,iBAEA,EAAA,KAAA,8BAAA,KAAA,KAAA,YAAA,mBAGA,iBAAA,WACA,GAAA,GAAA,KACA,EAAA,KAAA,QAAA,mBACA,EAAA,KAAA,UAAA,KAAA,EAEA,MAAA,YAAA,iBAAA,KAAA,YAAA,cACA,EAAA,SAAA,kBAGA,EAAA,YAAA,kBAGA,EAAA,IAAA,SACA,EAAA,MAAA,SAAA,GACA,EAAA,iBACA,EAAA,QAAA,gBAAA,KAAA,EAAA,EAAA,gBAGA,OAAA,WACA,GAAA,GAAA,KACA,EAAA,EAAA,WACA,GAAA,QAAA,UAAA,KAAA,EAEA,IAAA,MACA,EAAA,kBACA,EAAA,SACA,GAAA,KAAA,EAAA,QAAA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,KAAA,EACA,KAAA,EAAA,KAAA,EAAA,MACA,EAAA,EAAA,IAAA,KAGA,EAAA,KAAA,EAAA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,UAAA,KAAA,EACA,IAAA,EAAA,OAAA,CACA,GAAA,GAAA,EAAA,QAAA,eAAA,EAAA,EAAA,EAAA,QAEA,GACA,QACA,OAAA,MAIA,EAAA,QAAA,iBAAA,KAAA,GAEA,EAAA,QAAA,WAAA,KAAA,KAWA,EAAA,GAAA,iBAAA,SAAA,GACA,IAAA,MAAA,IAAA,QACA,KAAA,qDAGA,IAAA,GAAA,EAAA,KAAA,IACA,IA0FA,OAzFA,GAAA,MAEA,KAAA,OACA,KAAA,OACA,YAAA,eACA,oBAAA,wBACA,kBAAA,sBACA,WAAA,cACA,uBAAA,uBACA,uBAAA,wBACA,WAAA,cACA,sBAAA,0BACA,oBAAA,wBACA,iBAAA,oBACA,iBAAA,qBACA,iBAAA,oBACA,mBAAA,sBACA,cAAA,iBACA,aAAA,gBACA,yBAAA,6BACA,yBAAA,8BACA,mBAAA,wBAEA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,KAAA,SAAA,EACA,UAAA,GAAA,OAAA,IACA,EAAA,GAAA,KAKA,EAAA,EAAA,UAAA,EAAA,iBAAA,eAAA,MAAA,GAEA,GAAA,UAAA,EAAA,GACA,GAAA,GAAA,IACA,GAAA,UAAA,EACA,EAAA,QAAA,EACA,EAAA,YAAA,KAEA,EAAA,SAAA,SAAA,GACA,EAQA,YAAA,OAAA,MACA,EAAA,QAAA,KAAA,EAAA,QACA,EAAA,YAAA,EACA,EAAA,OAAA,KAAA,GACA,EAAA,UACA,YAAA,iBACA,YAAA,iBACA,EAAA,UAAA,QAAA,iCAAA,KAGA,EAAA,UAAA,SAAA,iBACA,MAAA,IAAA,QAAA,QACA,EAAA,QAAA,KACA,EACA,SAAA,GACA,EAAA,SAAA,OAtBA,EAAA,QAAA,KAAA,KACA,EAAA,YAAA,KACA,EAAA,UACA,YAAA,iBACA,SAAA,iBACA,EAAA,UAAA,QAAA,iCAAA,QAuBA,EAAA,KACA,SAEA,QAAA,EACA,QAAA,SAAA,EAAA,GACA,SAAA,IACA,EAAA,KAAA,GAEA,EAAA,KAAA,EACA,EAAA,SAAA,EAAA,SAKA,EAAA,MAAA,EAAA,MACA,EAAA,SAAA,EAAA,MAEA,EAAA,UAAA,YAAA,uBACA,EAAA,GAEA,OAEA,QCvXA,SAAA,GACA,YAEA,GAAA,oBACA,EAAA,iBAAA,gBAEA,KAAA,GAEA,KAAA,GAEA,aAAA,EASA,wBAAA,aAIA,0BAAA,IAGA,oBAAA,mBAEA,kBAAA,GAEA,WAAA,uBAEA,uBAAA,QAEA,uBAAA,QAEA,wBAAA,QAGA,WAAA,oBAEA,sBAAA,gCAEA,oBAAA,8BAEA,iBAAA,0BAEA,iBAAA,2BAEA,iBAAA,0BAEA,mBAAA,4BAEA,cAAA,uBAGA,aAAA,sBAEA,yBAAA,mCAEA,yBAAA,oCAGA,kBAAA,OAEA,kBAAA,qBAEA,oBAAA,uBAEA,mBAAA,sBAEA,oBAAA,uBAEA,sBAAA,yBAEA,kBAAA,qBAEA,kBAAA,wBAEA,yBAAA,8BAEA,qBAAA,iBAEA,uBAAA,0BAEA,+BAAA,mCAEA,iCAAA,sCAEA,mBAAA,6CAGA,mBAAA,qBAEA,YAAA,SAAA,GACA,MAAA,IAEA,uBAAA,SAAA,EAAA,EAAA,GACA,MAAA,GAAA,eAAA,EAAA,oBAAA,IAEA,qBAAA,SAAA,EAAA,EAAA,GACA,MAAA,GAAA,eAAA,EAAA,kBAAA,IAEA,kBAAA,SAAA,GACA,MAAA,MAAA,MAAA,IAEA,kBAAA,SAAA,GACA,MAAA,MAAA,MAAA,IAEA,kBAAA,SAAA,GACA,MAAA,IAEA,oBAAA,SAAA,GACA,MAAA,IAEA,eAAA,SAAA,EAAA,GACA,GAAA,MAEA,EAAA,CAwBA,OAvBA,GAAA,KAAA,EAAA,SAAA,EAAA,IACA,OAAA,EAAA,oBAAA,EAAA,iBAAA,EAAA,sBACA,OAAA,EAAA,oBAAA,EAAA,iBAAA,EAAA,sBACA,EAAA,KAAA,IAAA,EAAA,WAAA,MAGA,EAAA,KAAA,EAAA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,iBACA,KAAA,QAAA,EAAA,kBACA,KAAA,mBAAA,EAAA,YACA,KAAA,EAAA,WAEA,QAAA,EAAA,oBAAA,EAAA,gBAAA,EAAA,oBACA,OAAA,EAAA,oBAAA,EAAA,gBAAA,EAAA,mBACA,EAAA,SAAA,sBAEA,EAAA,GAAA,EAAA,YAAA,GACA,EAAA,SAAA,uBAGA,EAAA,KAAA,EAAA,IAAA,MAGA,GAEA,cAAA,SAAA,EAAA,GACA,MAAA,GAAA,iBAAA,EAAA,WAAA,EAAA,IAEA,0BAAA,SAAA,EAAA,EAAA,GACA,GAAA,GAAA,SAAA,EAAA,IACA,EAAA,EAAA,GACA,EAAA,GAAA,KAKA,OAJA,GAAA,QAAA,GACA,EAAA,SAAA,GACA,EAAA,WAAA,GACA,EAAA,WAAA,GACA,EAAA,eAAA,EAAA,uBAAA,IAEA,0BAAA,SAAA,EAAA,EAAA,GACA,GAAA,GAAA,SAAA,EAAA,IACA,EAAA,EAAA,GACA,EAAA,GAAA,KAKA,OAJA,GAAA,QAAA,GACA,EAAA,SAAA,GACA,EAAA,WAAA,GACA,EAAA,WAAA,GACA,EAAA,eAAA,EAAA,uBAAA,IAEA,iBAAA,SAAA,EAAA,EAAA,GAIA,IAHA,GAEA,GAFA,KACA,EAAA,UAEA,MAAA,EAAA,EAAA,OAAA,KAAA,CACA,GAAA,GAAA,EAAA,OAAA,EAAA,EACA,GAAA,EAAA,OAAA,GAEA,GACA,EAAA,KAAA,SAAA,eAAA,IAGA,EAAA,EAAA,OAAA,IACA,IAAA,GAAA,EAAA,UAAA,EAAA,GACA,EAAA,EAAA,eAAA,EAAA,EAAA,EACA,GAAA,QAAA,GACA,EAAA,KAAA,EAAA,SAAA,EAAA,GACA,EAAA,KAAA,KAIA,EAAA,KAAA,SAAA,eAAA,IAGA,EAAA,EAAA,OAAA,EAAA,GAOA,MAJA,IACA,EAAA,KAAA,SAAA,eAAA,IAGA,GAEA,eAAA,SAAA,EAAA,EAAA,GACA,OAAA,GACA,IAAA,KACA,MAAA,GAAA,YAAA,EAAA,QAAA,EAAA,EAEA,KAAA,QACA,IAAA,gBACA,MAAA,GAAA,uBAAA,EAAA,mBAAA,EAAA,EAEA,KAAA,MACA,IAAA,cACA,MAAA,GAAA,qBAAA,EAAA,iBAAA,EAAA,EAEA,KAAA,WACA,MAAA,GAAA,kBAAA,EAAA,cAAA,EAAA,EAEA,KAAA,WACA,MAAA,GAAA,kBAAA,EAAA,eAAA,EAAA,cAAA,EAAA,EAEA,KAAA,mBACA,MAAA,GAAA,0BAAA,EAAA,cAAA,EAAA,EAEA,KAAA,mBACA,MAAA,GAAA,0BAAA,EAAA,eAAA,EAAA,cAAA,EAAA,EAEA,KAAA,WACA,MAAA,GAAA,kBAAA,EAAA,cAAA,EAAA,EAEA,KAAA,aACA,MAAA,GAAA,oBAAA,EAAA,gBAAA,EAAA,EAEA,KAAA,QACA,IAAA,iBACA,MAAA,GAAA,eAAA,EAAA,oBAAA,EAAA,EAEA,SACA,GAAA,GAAA,EAAA,WACA,IAAA,EAAA,GACA,MAAA,GAAA,GAAA,EAAA,EAEA,MAAA,+BAAA,EAAA,8BAIA,UAAA,aAEA,WAAA,WACA,GAAA,GAAA,KAAA,UAAA,KAAA,iBAEA,IAAA,EAAA,OAAA,CACA,GAAA,GAAA,GAAA,EAAA,KAAA,QACA,GAAA,EAAA,QAAA,0BAAA,IACA,EAAA,EAAA,QAAA,oBAAA,IACA,EAAA,KAAA,QAAA,GACA,EACA,SAAA,uBAAA,KAAA,YAAA,eACA,SAAA,kBAAA,EAAA,KAAA,YAAA,kBAEA,EAAA,KAAA,8BAAA,KAAA,EAAA,KAAA,YAAA,mBAGA,WAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,QAAA,iBACA,GAAA,KAAA,UAAA,KAAA,KAEA,gBAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,QAAA,iBACA,GAAA,KAAA,UAAA,KAAA,KAEA,kBAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,QAAA,mBACA,GAAA,KAAA,UAAA,KAAA,KAEA,iBAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,QAAA,kBACA,GAAA,KAAA,UAAA,KAAA,KAEA,kBAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,QAAA,mBACA,GAAA,KAAA,UAAA,KAAA,KAEA,oBAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,QAAA,qBACA,GAAA,KAAA,UAAA,KAAA,KAEA,gBAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,QAAA,iBACA,GAAA,KAAA,UAAA,KAAA,KAEA,gBAAA,SAAA,EAAA,GACA,GAAA,KAAA,YAAA,oBAAA,OAAA,CAGA,GAFA,KAAA,UAAA,YAAA,mBAEA,KAAA,cAAA,CACA,GAAA,GAAA,KAAA,QAAA,iBACA,MAAA,cAAA,KAAA,UAAA,KAAA,GACA,KAAA,kBAAA,KAAA,cAAA,SACA,KAAA,cAAA,SAGA,GAAA,KAAA,cAAA,CACA,KAAA,kBAAA,OAEA,IAAA,GAAA,KAAA,YAAA,oBACA,IACA,GAAA,KAAA,EAAA,EAAA,MAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,cAAA,OACA,GAAA,KAAA,SAAA,IAAA,EAAA,YACA,EAAA,OAAA,KAAA,OAAA,EAAA,kBACA,EAAA,KAAA,EAAA,IAAA,KACA,OAGA,KAAA,kBAAA,OAAA,GAEA,EAAA,EAAA,QAGA,MAAA,UAAA,SAAA,kBACA,EAAA,MAGA,uBAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,QAAA,yBACA,EAAA,KAAA,UAAA,KAAA,EAEA,GAAA,OACA,KAAA,GAAA,GAAA,EAAA,GAAA,EAAA,cAAA,EAAA,gBAAA,IACA,EAAA,OAAA,EAAA,qBAAA,IAAA,GAAA,KAAA,EAAA,YAGA,GAAA,IAEA,mBAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,QAAA,yBACA,EAAA,KAAA,UAAA,KAAA,GAEA,EAAA,KAAA,QAAA,qBACA,EAAA,KAAA,UAAA,KAAA,EAEA,GAAA,EACA,OAAA,GAAA,GACA,WAAA,GAEA,EAAA,QACA,EAAA,OACA,gBAAA,cACA,eAAA,WACA,GAAA,GAAA,EAAA,MAAA,gBACA,EAAA,EAAA,MAEA,OAAA,GAAA,cAAA,EAAA,gBAAA,GAEA,cAAA,WACA,GAAA,GAAA,EAAA,MAAA,gBACA,EAAA,EAAA,MAEA,GAAA,MAAA,GACA,EAAA,IAAA,GAAA,YAKA,EAAA,IAEA,qBAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,QAAA,yBACA,EAAA,KAAA,UAAA,KAAA,EAEA,GAAA,KAAA,QAAA,sBACA,IAAA,GAAA,KAAA,UAAA,KAAA,EAEA,IAAA,EAAA,gBAAA,EACA,EAAA,KAAA,YAAA,OAEA,CACA,GAAA,GAAA,IAEA,GAAA,KAAA,YAAA,GACA,EAAA,IAAA,UAAA,OAAA,WACA,GAAA,EAAA,KAAA,WAAA,CACA,GAAA,GAAA,EAAA,UAAA,KAAA,iBAEA,IAAA,EAAA,OAAA,CACA,GAAA,GAAA,GAAA,EAAA,KAAA,QACA,GAAA,EAAA,QAAA,0BAAA,IACA,EAAA,EAAA,QAAA,oBAAA,IACA,EAAA,KAAA,QAAA,GACA,EACA,SAAA,uBAAA,EAAA,eACA,SAAA,iBAAA,EAAA,eAEA,EAAA,KAAA,8BAAA,KAAA,EAAA,eAIA,EAAA,KAAA,YAAA,OAGA,GAAA,KAAA,YAAA,GACA,EAAA,WAKA,EAAA,KAAA,WAAA,GAEA,EAAA,IAEA,sBAAA,SAAA,EAAA,GACA,IAAA,KAAA,QAAA,wBAEA,WADA,IAAA,EAIA,IAAA,GAAA,KAEA,EAAA,KAAA,QAAA,+BACA,EAAA,KAAA,UAAA,KAAA,GAEA,EAAA,KAAA,QAAA,iCACA,EAAA,KAAA,UAAA,KAAA,EAEA,GAAA,OACA,EAAA,QAAA,OACA,MAAA,IAAA,QAAA,mBAAA,GAAA,EAAA,SAAA,GACA,GAAA,GAAA,GAEA,IAAA,cAAA,EAAA,QAAA,wBAAA,CACA,GAAA,GAAA,EAAA,WACA,KAAA,OAAA,SACA,KAAA,OAAA,cACA,KAAA,WAAA,GAEA,EAAA,EAAA,kBACA,GACA,OAAA,GACA,OAAA,KACA,OAAA,EAAA,QAAA,0BAEA,IAAA,GAAA,EAAA,kCACA,GAAA,OAAA,GAEA,EAAA,OAAA,GAGA,IAAA,GAAA,KAAA,GAAA,CACA,GAAA,GAAA,EAAA,GAEA,EAAA,EAAA,UAEA,IAAA,gBAAA,EAAA,QAAA,wBACA,EAAA,KAAA,OAAA,gBAEA,CAAA,GAAA,cAAA,EAAA,QAAA,wBAIA,KAAA,0CAAA,EAAA,QAAA,uBAHA,GAAA,KAAA,OAAA,SAMA,EAAA,KAAA,OAAA,GACA,EAAA,KAAA,OAAA,cACA,EAAA,IAAA,EAAA,SACA,EAAA,KAAA,EAEA,IAAA,GAAA,EAAA,kBACA,GACA,OAAA,GACA,OAAA,KACA,OAAA,EAAA,eAAA,EAAA,QAAA,wBAAA,EAAA,oBAEA,IAAA,GAAA,EAAA,kCACA,GAAA,OAAA,GAEA,EAAA,OAAA,GAGA,EAAA,OACA,EAAA,OAEA,EAAA,MAGA,iBAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,QAAA,kBACA,GAAA,KAAA,UAAA,KAAA,KAEA,iBAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,QAAA,mBACA,EAAA,KAAA,UAAA,KAAA,EAEA,GAAA,iBAAA,EAAA,cACA,EAAA,SAAA,YAGA,EAAA,YAAA,YAGA,EAAA,IAEA,OAAA,WACA,GAAA,GAAA,KACA,EAAA,EAAA,WACA,GAAA,QAAA,UAAA,KAAA,EAEA,IAAA,MACA,EAAA,kBACA,EAAA,iBACA,GAAA,KAAA,EAAA,QAAA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,KAAA,EACA,KAAA,EAAA,KAAA,EAAA,MACA,EAAA,EAAA,IAAA,KAGA,EAAA,KAAA,EAAA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,UAAA,KAAA,EACA,IAAA,EAAA,OAAA,CACA,GAAA,GAAA,EAAA,QAAA,eAAA,EAAA,EAAA,EAAA,QAEA,GACA,QACA,OAAA,KAIA,IAAA,GAAA,KACA,EAAA,KACA,EAAA,KACA,EAAA,KACA,EAAA,KACA,EAAA,KACA,EAAA,KACA,EAAA,KACA,EAAA,KACA,EAAA,KACA,EAAA,KACA,EAAA,KACA,EAAA,KAEA,EAAA,WAEA,OAAA,GACA,OAAA,GACA,OAAA,GACA,OAAA,GACA,OAAA,GACA,OAAA,GACA,OAAA,GACA,OAAA,GACA,OAAA,GACA,OAAA,GACA,OAAA,GACA,OAAA,GACA,OAAA,GAEA,EAAA,KAAA,YAAA,GAIA,GAAA,QAAA,gBAAA,KAAA,EAAA,EAAA,SAAA,GACA,EAAA,EACA,MAEA,EAAA,QAAA,kBAAA,KAAA,EAAA,EAAA,SAAA,GACA,EAAA,EACA,MAEA,EAAA,QAAA,iBAAA,KAAA,EAAA,EAAA,SAAA,GACA,EAAA,EACA,MAEA,EAAA,QAAA,kBAAA,KAAA,EAAA,EAAA,SAAA,GACA,EAAA,EACA,MAEA,EAAA,QAAA,oBAAA,KAAA,EAAA,EAAA,SAAA,GACA,EAAA,EACA,MAEA,EAAA,QAAA,gBAAA,KAAA,EAAA,EAAA,SAAA,GACA,EAAA,EACA,MAEA,EAAA,QAAA,gBAAA,KAAA,EAAA,EAAA,SAAA,GACA,EAAA,EACA,MAEA,EAAA,QAAA,uBAAA,KAAA,EAAA,EAAA,SAAA,GACA,EAAA,EACA,MAEA,EAAA,QAAA,mBAAA,KAAA,EAAA,EAAA,SAAA,GACA,EAAA,EACA,MAEA,EAAA,QAAA,qBAAA,KAAA,EAAA,EAAA,SAAA,GACA,EAAA,EACA,MAEA,EAAA,QAAA,iBAAA,KAAA,EAAA,EAAA,SAAA,GACA,EAAA,EACA,MAEA,EAAA,QAAA,sBAAA,KAAA,EAAA,EAAA,SAAA,GACA,EAAA,EACA,MAEA,EAAA,QAAA,iBAAA,KAAA,EAAA,EAAA,SAAA,GACA,EAAA,EACA,EAAA,KAAA,YAAA,GACA,MAGA,EAAA,QAAA,WAAA,KAAA,EAAA,EAAA,SAAA,GACA,EAAA,IAAA,UACA,EAAA,OAAA,SAAA,GACA,IAAA,EAAA,KAAA,YAAA,CAIA,EAAA,KAAA,YAAA,GAEA,EAAA,gBAEA,IAAA,GAAA,GAAA,OAAA,OAEA,GAAA,QAAA,iBAAA,KAAA,EAAA,EAAA,SAAA,GACA,EAAA,QAAA,KAEA,EAAA,QAAA,mBAAA,KAAA,EAAA,EAAA,SAAA,GACA,EAAA,UAAA,KAEA,EAAA,QAAA,kBAAA,KAAA,EAAA,EAAA,SAAA,GACA,EAAA,SAAA,KAEA,EAAA,QAAA,mBAAA,KAAA,EAAA,EAAA,SAAA,GACA,EAAA,UAAA,KAEA,EAAA,QAAA,qBAAA,KAAA,EAAA,EAAA,SAAA,GACA,EAAA,YAAA,KAEA,EAAA,QAAA,iBAAA,KAAA,EAAA,EAAA,SAAA,GACA,EAAA,QAAA,KAEA,EAAA,QAAA,kBAAA,KAAA,EAAA,EAAA,SAAA,GACA,EAAA,SAAA,KAEA,EAAA,QAAA,wBAAA,KAAA,EAAA,EAAA,SAAA,GACA,EAAA,cAAA,KAEA,EAAA,QAAA,oBAAA,KAAA,EAAA,EAAA,SAAA,GACA,EAAA,WAAA,KAEA,EAAA,QAAA,sBAAA,KAAA,EAAA,EAAA,SAAA,GACA,EAAA,aAAA,KAEA,EAAA,QAAA,kBAAA,KAAA,EAAA,EAAA,SAAA,GACA,EAAA,kBAAA,KAEA,EAAA,QAAA,kBAAA,KAAA,EAAA,EAAA,SAAA,GACA,EAAA,SAAA,KAGA,MAAA,IAAA,QAAA,SACA,EACA,SAAA,EAAA,GACA,EAAA,KAAA,YAAA,GACA,EAAA,QAAA,UAAA,KAAA,EAAA,EAAA,IAEA,SAAA,EAAA,GACA,EAAA,KAAA,YAAA,GACA,EAAA,QAAA,UAAA,KAAA,EAAA,EAAA,UAMA,EAAA,QAAA,WAAA,KAAA,IAGA,iBAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,QAAA,kBACA,EAAA,KAAA,UAAA,KAAA,EAEA,GAAA,EAAA,QAEA,mBAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,QAAA,oBACA,EAAA,KAAA,UAAA,KAAA,EAEA,GAAA,EAAA,QAEA,kBAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,QAAA,mBACA,EAAA,KAAA,UAAA,KAAA,EAEA,GAAA,EAAA,QAEA,mBAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,QAAA,oBACA,EAAA,KAAA,UAAA,KAAA,EAEA,GAAA,EAAA,QAEA,qBAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,QAAA,sBACA,EAAA,KAAA,UAAA,KAAA,EAEA,GAAA,EAAA,QAEA,iBAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,QAAA,kBACA,EAAA,KAAA,UAAA,KAAA,EAEA,GAAA,EAAA,QAEA,kBAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,QAAA,kBACA,EAAA,KAAA,UAAA,KAAA,GAEA,IACA,GAAA,KAAA,EAAA,SAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,KAAA,YACA,EAAA,KAAA,EAAA,SAIA,EAAA,IAEA,wBAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,QAAA,yBACA,EAAA,KAAA,UAAA,KAAA,EAEA,GAAA,EAAA,QAEA,oBAAA,SAAA,EAAA,GAMA,IAAA,GALA,GAAA,KAAA,QAAA,qBACA,EAAA,KAAA,UAAA,KAAA,GACA,EAAA,EAAA,KAAA,sBAEA,KACA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,GAAA,GAAA,EAAA,EAAA,GACA,GAAA,KAAA,EAAA,OAGA,EAAA,IAEA,sBAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,QAAA,uBACA,EAAA,KAAA,UAAA,KAAA,EAEA,GAAA,EAAA,KAAA,aAEA,kBAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,QAAA,iCACA,EAAA,KAAA,UAAA,KAAA,GACA,EAAA,EAAA,KAAA,SAEA,GAAA,EAEA,IAAA,cAAA,KAAA,QAAA,wBACA,IAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,GAAA,GAAA,EAAA,EAAA,GAIA,IAHA,EAAA,KAAA,SACA,EAAA,KAAA,EAAA,KAAA,SAEA,EAAA,KAAA,WACA,UAIA,IAAA,gBAAA,KAAA,QAAA,wBACA,IAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,GAAA,GAAA,EAAA,EAAA,GACA,GAAA,KAAA,YAAA,EAAA,KAAA,SACA,EAAA,KAAA,EAAA,KAAA,SAKA,EAAA,IAEA,kBAAA,SAAA,EAAA,GACA,GAAA,GAAA,KAAA,QAAA,mBACA,EAAA,KAAA,UAAA,KAAA,EAEA,GAAA,EAAA,QAGA,UAAA,WACA,KAAA,IAAA,UACA,MAAA,oCAGA,UAAA,SAAA,EAAA,GACA,GAAA,EAEA,WADA,OAAA,EAIA,IAAA,GAAA,KAAA,MAAA,EAAA,aAEA,IAAA,KAAA,EAAA,OACA,MAAA,4EAEA,IAAA,KAAA,EAAA,OACA,MAAA,6FAEA,IAAA,KAAA,EAAA,OAAA,CACA,MAAA,8BACA,IAAA,GAAA,KAAA,QAAA,iBACA,MAAA,UAAA,KAAA,GAAA,YAEA,IAAA,KAAA,EAAA,OAAA,CACA,MAAA,mCACA,IAAA,GAAA,KAAA,QAAA,mBACA,MAAA,UAAA,KAAA,GAAA,YAEA,IAAA,KAAA,EAAA,OAAA,CACA,MAAA,8BACA,IAAA,GAAA,KAAA,QAAA,kBACA,MAAA,UAAA,KAAA,GAAA,YAEA,IAAA,KAAA,EAAA,OAAA,CACA,MAAA,8BACA,IAAA,GAAA,KAAA,QAAA,mBACA,MAAA,UAAA,KAAA,GAAA,YAEA,IAAA,KAAA,EAAA,OAAA,CACA,MAAA,2BACA,IAAA,GAAA,KAAA,QAAA,qBACA,MAAA,UAAA,KAAA,GAAA,YAEA,IAAA,KAAA,EAAA,OAAA,CACA,MAAA,6BACA,IAAA,GAAA,KAAA,QAAA,iBACA,MAAA,UAAA,KAAA,GAAA,YAGA,OAAA,gFAYA,EAAA,GAAA,iBAAA,SAAA,GACA,IAAA,MAAA,IAAA,QACA,KAAA,qDAGA,IAAA,GAAA,EAAA,KAAA,IACA,IA2GA,OA1GA,GAAA,MAEA,KAAA,OACA,KAAA,OACA,YAAA,eACA,wBAAA,4BACA,oBAAA,wBACA,kBAAA,sBACA,WAAA,cACA,uBAAA,uBACA,uBAAA,mBACA,wBAAA,mBACA,WAAA,cACA,sBAAA,0BACA,oBAAA,wBACA,iBAAA,oBACA,iBAAA,qBACA,iBAAA,oBACA,mBAAA,sBACA,cAAA,iBACA,aAAA,gBACA,yBAAA,6BACA,yBAAA,8BACA,kBAAA,sBACA,kBAAA,sBACA,oBAAA,wBACA,mBAAA,uBACA,oBAAA,wBACA,sBAAA,0BACA,kBAAA,sBACA,kBAAA,sBACA,yBAAA,8BACA,qBAAA,gCACA,uBAAA,2BACA,+BAAA,6BACA,iCAAA,gCACA,mBAAA,8BACA,mBAAA,wBAEA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,KAAA,SAAA,EACA,UAAA,GAAA,OAAA,IACA,EAAA,GAAA,KAKA,EAAA,EAAA,UAAA,EAAA,iBAAA,eAAA,MAAA,GAEA,GAAA,UAAA,EAAA,GACA,GAAA,GAAA,IACA,GAAA,UAAA,EACA,EAAA,QAAA,EACA,EAAA,YAAA,KACA,EAAA,KACA,QAAA,EACA,QAAA,SAAA,EAAA,GACA,SAAA,IACA,EAAA,KAAA,GAEA,EAAA,KAAA,EACA,EAAA,SAAA,EAAA,OAEA,QAAA,WACA,EAAA,SAAA,EAAA,QAIA,EAAA,SAAA,SAAA,GACA,EAQA,YAAA,OAAA,MACA,EAAA,QAAA,KAAA,EAAA,QACA,EAAA,YAAA,EACA,EAAA,OAAA,KAAA,GACA,EAAA,UACA,YAAA,iBACA,YAAA,iBACA,EAAA,UAAA,QAAA,iCAAA,KAGA,EAAA,UAAA,SAAA,iBACA,MAAA,IAAA,QAAA,QACA,EAAA,QAAA,KACA,EACA,SAAA,GACA,EAAA,SAAA,OAtBA,EAAA,QAAA,KAAA,KACA,EAAA,YAAA,KACA,EAAA,UACA,YAAA,iBACA,SAAA,iBACA,EAAA,UAAA,QAAA,iCAAA,QAuBA,EAAA,KAAA,QAAA,EAAA,KAEA,EAAA,MAAA,EAAA,MACA,EAAA,SAAA,EAAA,MAEA,EAAA,UAAA,YAAA,uBACA,EAAA,GAEA,OAEA,QCz8BA,SAAA,GACA,YAsBA,IAAA,GAAA,GAAA,KAEA,GAAA,iBACA,EAAA,cAAA,gBAEA,KAAA,GAEA,SAAA,QAEA,UAAA,OAEA,YAAA,EAGA,UAAA,GACA,YAAA,SACA,gBAAA,QAGA,cAAA,MAEA,eAAA,EAEA,UAAA,EAEA,QAAA,EAEA,kBAAA,mBAEA,sBAAA,MAEA,2BAAA,MAEA,uBAAA,SAEA,4BAAA,SAGA,uBAAA,uCAEA,mBAAA,mCAEA,oBAAA,2CAEA,uBAAA,+BAEA,sBAAA,8BAGA,gBAAA,SAAA,EAAA,EAAA,EAAA,GACA,GAAA,GAAA,KACA,EAAA,EAAA,KAAA,sBAAA,EAAA,QAAA,gBACA,EAAA,EAAA,KAAA,iBAAA,EAAA,QAAA,YACA,EAAA,EAAA,eAAA,EAAA,GACA,EAAA,EAAA,QAAA,SAAA,GACA,EAAA,EAAA,eACA,SAAA,cAAA,EAAA,eAAA,OAAA,IACA,SAAA,wBAAA,EAAA,eAAA,OAAA,IACA,SAAA,4BAAA,EAAA,QAAA,WACA,SAAA,mBACA,KAAA,EAOA,OANA,IACA,EAAA,SAAA,yBAEA,GACA,EAAA,SAAA,wBAEA,GAGA,mBAAA,SAAA,EAAA,EAAA,GACA,GAAA,GAAA,KACA,EAAA,EAAA,KAAA,iBAAA,EAAA,QAAA,kBACA,EAAA,EAAA,KAAA,sBAAA,EAAA,QAAA,sBACA,EAAA,EAAA,KAAA,4BAAA,EAAA,QAAA,2BACA,EAAA,EAAA,KAAA,uBAAA,EAAA,QAAA,uBACA,EAAA,EAAA,KAAA,6BAAA,EAAA,QAAA,2BAEA,GAAA,GAAA,MAAA,GACA,EAAA,QAAA,EAAA,UAAA,EACA,IAAA,GAAA,EAAA,YAAA,EAAA,WACA,EAAA,eAAA,EAAA,GACA,EAAA,eAAA,EAAA,GACA,EAAA,EAAA,YAAA,EAAA,WACA,EAAA,eAAA,EAAA,GACA,EAAA,eAAA,EAAA,GAEA,EAAA,EACA,QAAA,SAAA,GACA,QAAA,UAAA,EACA,OAAA,GAAA,iBAAA,KAAA,IAGA,oBAAA,SAAA,GACA,GAAA,GAAA,KACA,EAAA,EAAA,eACA,SAAA,kBACA,KAAA,EAAA,eAAA,EAAA,UAAA,KAAA,0BAAA,EAAA,QAAA,cAAA,IAEA,EAAA,EAAA,eAAA,SAAA,GACA,EAAA,EAAA,eAAA,OAAA,GACA,EAAA,EAAA,eAAA,KAAA,GACA,EAAA,EAAA,QACA,OAAA,GAAA,eACA,SAAA,aAAA,GACA,SAAA,qBAAA,GACA,SAAA,sBAAA,GACA,SAAA,qBAAA,GACA,SAAA,aACA,OAAA,IAGA,kBAAA,SAAA,GACA,GAAA,GAAA,KACA,EAAA,EAAA,cACA,EAAA,EAAA,gBACA,EAAA,EAAA,WACA,EAAA,EAAA,WACA,KAAA,KAAA,cAAA,EAAA,SACA,KAAA,OAAA,eAAA,EAAA,SACA,SAAA,oBACA,IACA,EAAA,SAAA,oBAMA,KAAA,GAJA,GAAA,EAAA,iBACA,SAAA,sBACA,SAAA,GAEA,EAAA,EAAA,GAAA,EAAA,IACA,EAAA,iBACA,SAAA,qBAAA,GACA,SAAA,qBACA,SAAA,GAAA,GAAA,EAAA,yBAAA,0BACA,SAAA,EAeA,QAZA,GAAA,GAAA,IACA,EAAA,SAAA,mBAEA,GAAA,GACA,EAAA,SAAA,oBAGA,EAAA,MAAA,SAAA,GACA,EAAA,iBACA,EAAA,QAAA,gBAAA,KAAA,EAAA,KAGA,GAGA,iBAAA,SAAA,GACA,GAAA,GAAA,EAAA,cACA,EAAA,EAAA,gBACA,EAAA,EAAA,WACA,EAAA,EAAA,iBACA,KAAA,KAAA,cAAA,EAAA,SACA,KAAA,OAAA,eAAA,EAAA,SACA,SAAA,oBACA,IACA,EAAA,SAAA,oBAMA,KAAA,GAJA,GAAA,EAAA,iBACA,SAAA,sBACA,SAAA,GAEA,EAAA,EAAA,GAAA,EAAA,IACA,EAAA,iBACA,SAAA,qBAAA,GACA,SAAA,qBACA,SAAA,GAAA,GAAA,EAAA,yBAAA,0BACA,SAAA,EAUA,OAPA,IAAA,GAAA,EACA,EAAA,SAAA,mBAEA,GAAA,GACA,EAAA,SAAA,oBAGA,GAGA,qBAAA,SAAA,GACA,GAAA,GAAA,EAAA,WAEA,EAAA,EAAA,eAAA,OAAA,EAAA,oBACA,EAAA,EAAA,eACA,SAAA,cAAA,GACA,SAAA,mBAAA,GACA,SAAA,uBAAA,EAAA,eACA,SAAA,aASA,OANA,GAAA,SADA,EACA,oBAGA,yBAAA,EAAA,iBAGA,GAGA,aAAA,SAAA,EAAA,EAAA,GACA,GAAA,GAAA,EAAA,eACA,SAAA,eAAA,GACA,SAAA,cAUA,OARA,GAAA,SADA,EACA,oBAEA,EACA,kBAGA,uBAEA,GAGA,oBAAA,SAAA,GACA,MAAA,GAAA,eACA,SAAA,eACA,SAAA,oBAAA,IAGA,gBAAA,WACA,MAAA,wDAGA,UAAA,SAAA,EAAA,EAAA,GACA,GAAA,GAAA,KACA,EAAA,EAAA,QAAA,oBAAA,KAAA,EAAA,EAAA,GAAA,MACA,EAAA,IAEA,GAAA,KAAA,EAAA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,KACA,EAAA,EAAA,kBAEA,GAAA,QAAA,EAAA,WACA,EAAA,SAAA,EAAA,YACA,EAAA,QAAA,EAAA,eAEA,EAAA,QAAA,EAAA,WACA,EAAA,SAAA,EAAA,YACA,EAAA,QAAA,EAAA,eAEA,EAAA,WAAA,EAAA,WACA,EAAA,QAAA,EAAA,UAAA,EAGA,IAAA,GAAA,CAOA,IANA,IACA,EAAA,EAAA,UAAA,EAAA,WAEA,IACA,EAAA,EAAA,UAAA,EAAA,KAAA,iBAAA,WAEA,EAAA,EAAA,CACA,GAAA,GAAA,EAAA,QAAA,aAAA,KAAA,EAAA,EAAA,KAAA,GAAA,EACA,GAAA,OAAA,GAGA,GAAA,EAEA,IADA,EAAA,YAAA,EAAA,mBAAA,UAAA,EAAA,UACA,EAAA,QAAA,kBAAA,KAAA,EAAA,GAGA,EAAA,QAAA,iBAAA,KAAA,EAAA,EAGA,IAAA,GAAA,EAAA,QAAA,qBAAA,KAAA,EAAA,EACA,GAAA,OAAA,GACA,EAAA,OAAA,GAEA,EAAA,GAGA,IAAA,GAAA,EAAA,KAAA,iBACA,EAAA,EAAA,UAAA,EAAA,SACA,IAAA,EAAA,GAAA,MAAA,EAAA,CACA,GAAA,GAAA,EAAA,QAAA,aAAA,KAAA,EAAA,EAAA,KAAA,GAAA,EACA,GAAA,OAAA,GAGA,MAAA,IAIA,SAAA,GAUA,EAAA,GAAA,cAAA,SAAA,GA6CA,QAAA,GAAA,GAEA,EAAA,GAAA,MAAA,GACA,EAAA,SAAA,EAAA,EAAA,GAGA,EAAA,QAAA,EAAA,UAAA,GAAA,EAAA,UAAA,GAEA,IAAA,GAAA,GAAA,MAAA,EAAA,cAAA,EAAA,GAEA,EAAA,KAAA,OAAA,EAAA,GAAA,MAAA,GAAA,EAEA,QAAA,EAAA,cAAA,GAxDA,IAAA,MAAA,IAAA,QACA,KAAA,qDAGA,IAAA,GAAA,EAAA,KAAA,IACA,IACA,GAAA,MAEA,KAAA,OACA,SAAA,YACA,UAAA,aACA,YAAA,gBACA,UAAA,aACA,YAAA,eACA,gBAAA,oBACA,cAAA,kBACA,eAAA,mBACA,SAAA,YACA,OAAA,UACA,kBAAA,sBACA,sBAAA,2BACA,2BAAA,iCACA,uBAAA,4BACA,4BAAA,kCACA,uBAAA,2BACA,mBAAA,uBACA,oBAAA,wBACA,uBAAA,2BACA,sBAAA,2BAEA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,KAAA,SAAA,EACA,UAAA,GAAA,OAAA,IACA,EAAA,GAAA,IAKA,IAAA,GAAA,EAAA,UAAA,EAAA,cAAA,eAAA,MAAA,EAEA,KAAA,EAAA,KACA,KAAA,kCA8kBA,OA5jBA,IAAA,UAAA,EAAA,GACA,GAAA,GAAA,IACA,GAAA,UAAA,EACA,EAAA,QAAA,EAEA,EAAA,KACA,QAAA,EACA,QAAA,WACA,EAAA,eAKA,IAAA,GAAA,mCAEA,IADA,EAAA,cAAA,EAAA,KAAA,EAAA,WACA,EAAA,cACA,KAAA,iBAAA,EAAA,SAAA,cAIA,GAAA,iBAAA,GAAA,MACA,EAAA,iBAAA,SAAA,GACA,EAAA,iBAAA,WAAA,GACA,EAAA,iBAAA,WAAA,GAEA,EAAA,gBACA,EAAA,iBAAA,SAAA,EAAA,eAGA,IAAA,GAAA,oCAAA,KAAA,EAAA,UAYA,QAXA,GACA,EAAA,UAAA,EAAA,GACA,EAAA,iBACA,WAAA,EAAA,GACA,MAAA,SAAA,EAAA,MAIA,EAAA,iBAAA,EAGA,EAAA,WACA,IAAA,QAGA,GAFA,EAAA,iBAAA,QAAA,GAEA,EAAA,gBAAA,CACA,GAAA,GAAA,SAAA,EAAA,gBAAA,MACA,QAAA,EAAA,gBAAA,YACA,IAAA,IACA,EAAA,iBAAA,SACA,EAAA,iBAAA,WAAA,EAEA,MACA,KAAA,IACA,EAAA,iBAAA,SACA,EAAA,iBAAA,WAAA,EAEA,MACA,KAAA,IACA,EAAA,iBAAA,SAAA,EACA,MACA,KAAA,KACA,EAAA,EAAA,iBAAA,YACA,EAAA,iBAAA,SAAA,IAKA,KACA,KAAA,OAGA,IAFA,GAAA,GAAA,EAAA,iBAAA,SACA,EAAA,EAAA,EAAA,QAAA,YACA,EAAA,GACA,GAAA,CAMA,IAJA,GACA,EAAA,iBAAA,QAAA,EAAA,iBAAA,UAAA,GAGA,EAAA,gBAAA,CACA,GAAA,GAAA,EAAA,gBAAA,KACA,QAAA,EAAA,gBAAA,YACA,IAAA,IACA,EAAA,iBAAA,QACA,EAAA,iBAAA,UAAA,EAAA,EAEA,MACA,KAAA,IACA,EAAA,iBAAA,QACA,EAAA,iBAAA,UAAA,EAAA,EAEA,MACA,KAAA,IACA,GAAA,GAAA,EAAA,EAAA,iBACA,GAAA,iBAAA,QACA,EAAA,iBAAA,UAAA,GAAA,EAAA,EAAA,IAEA,MACA,KAAA,KACA,GAAA,GAAA,EAAA,EAAA,iBAEA,GAAA,iBAAA,eAAA,EAAA,IACA,EAAA,EAAA,IAEA,EAAA,iBAAA,QACA,EAAA,iBAAA,UAAA,GAAA,EAAA,EAAA;EAMA,KACA,KAAA,MACA,GAAA,EAAA,gBAAA,CACA,GAAA,GAAA,EAAA,gBAAA,KACA,QAAA,EAAA,gBAAA,YACA,IAAA,IACA,EAAA,iBAAA,QACA,EAAA,iBAAA,UAAA,EAEA,MACA,KAAA,IACA,EAAA,iBAAA,QACA,EAAA,iBAAA,UAAA,EAEA,MACA,KAAA,IACA,EAAA,iBAAA,QAAA,EACA,MACA,KAAA,KACA,EAAA,EAAA,iBAAA,WACA,EAAA,iBAAA,QAAA,IAKA,KACA,SACA,KAAA,cAAA,EAAA,QAAA,UAAA,iBAGA,EAAA,aAAA,GAAA,MAAA,EAAA,iBAEA,IAAA,GAAA,GAAA,KACA,GAAA,SAAA,IACA,EAAA,WAAA,IACA,EAAA,WAAA,GACA,EAAA,gBAAA,EAEA,IAAA,GAAA,GAAA,KACA,GAAA,SAAA,GACA,EAAA,WAAA,GACA,EAAA,WAAA,GACA,EAAA,gBAAA,GAEA,EAAA,gBACA,MAAA,EACA,IAAA,GAGA,EAAA,aAAA,SAAA,GACA,OAAA,EAAA,cAAA,IACA,IAAA,OACA,EAAA,SAAA,EAAA,WAAA,EACA,MACA,KAAA,MACA,EAAA,QAAA,EAAA,UAAA,EACA,MACA,KAAA,OACA,EAAA,QAAA,EAAA,UAAA,EACA,MACA,KAAA,QACA,EAAA,SAAA,EAAA,WAAA,EACA,MACA,KAAA,OACA,EAAA,YAAA,EAAA,cAAA,GAGA,MAAA,IAGA,EAAA,aAAA,SAAA,GACA,OAAA,EAAA,cAAA,IACA,IAAA,OACA,EAAA,SAAA,EAAA,WAAA,EACA,MACA,KAAA,MACA,EAAA,QAAA,EAAA,UAAA,EACA,MACA,KAAA,OACA,EAAA,QAAA,EAAA,UAAA,EACA,MACA,KAAA,QACA,EAAA,SAAA,EAAA,WAAA,EACA,MACA,KAAA,OACA,EAAA,YAAA,EAAA,cAAA,GAGA,MAAA,IAaA,EAAA,eAAA,SAAA,GAGA,IAAA,GAFA,MAEA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,GAEA,GAFA,EAAA,EAAA,GACA,EAAA,EAAA,kBAGA,GAAA,QAAA,gBACA,EAAA,GAAA,MAAA,GACA,EAAA,SAAA,EAAA,WAAA,EAAA,QAAA,iBAGA,EAAA,CAGA,IAAA,GAAA,EAAA,eAAA,SAAA,EAEA,GAAA,KACA,EAAA,OAGA,EAAA,GAAA,MAEA,KAAA,EACA,KAAA,EACA,IAAA,IAKA,MAAA,IAGA,EAAA,gBAAA,SAAA,EAAA,GACA,GAAA,GAAA,GAAA,MAAA,GACA,IAEA,GACA,GAAA,MACA,QAAA,EAAA,eAAA,SAAA,GACA,KAAA,GAAA,MAAA,KAEA,EAAA,QAAA,EAAA,UAAA,SAEA,EAAA,UAAA,EAAA,UAEA,OAAA,IAGA,EAAA,cAAA,SAAA,GACA,GAAA,GAAA,KACA,EAAA,IAEA,IAAA,EAAA,QAAA,YAAA,GAAA,EAAA,QAAA,UAAA,EAAA,CACA,GAAA,GAAA,EAAA,QAAA,SAAA,WAAA,MAAA,IAEA,GAAA,GAAA,MACA,EAAA,YAAA,KACA,EAAA,SAAA,GACA,EAAA,QAAA,GACA,EAAA,SAAA,SAAA,EAAA,KACA,EAAA,WAAA,EAAA,OAAA,EAAA,SAAA,EAAA,IAAA,GACA,EAAA,WAAA,GACA,EAAA,gBAAA,GAEA,EAAA,EAAA,QAAA,OAAA,WAAA,MAAA,KAEA,EAAA,GAAA,MACA,EAAA,YAAA,KACA,EAAA,SAAA,GACA,EAAA,QAAA,GACA,EAAA,SAAA,SAAA,EAAA,KACA,EAAA,WAAA,EAAA,OAAA,EAAA,SAAA,EAAA,IAAA,GACA,EAAA,WAAA,GACA,EAAA,gBAAA,GAEA,EAAA,UAAA,EAAA,WACA,EAAA,QAAA,OAGA,CA2CA,GA1CA,EAAA,KAAA,EAAA,SAAA,EAAA,GACA,GAAA,GAAA,KACA,EAAA,IAEA,GAAA,KAAA,EAAA,SAAA,EAAA,KACA,GAAA,EAAA,KAAA,UAAA,EAAA,aACA,EAAA,EAAA,QAEA,GAAA,EAAA,KAAA,iBAAA,UAAA,EAAA,aACA,EAAA,EAAA,KAAA,mBAIA,IAAA,GAAA,GAAA,MAAA,EACA,GAAA,YAAA,KACA,EAAA,SAAA,GACA,EAAA,QAAA,EAEA,IAAA,GAAA,GAAA,MAAA,EACA,GAAA,YAAA,KACA,EAAA,SAAA,GACA,EAAA,QAAA,GAEA,EAAA,UAAA,EAAA,WACA,EAAA,QAAA,KAGA,GAAA,EAAA,UAAA,EAAA,aACA,EAAA,KAEA,GAAA,EAAA,UAAA,EAAA,aACA,EAAA,KAIA,IACA,EAAA,GAAA,OAEA,IACA,EAAA,GAAA,OAGA,EAAA,QAAA,YAAA,GAAA,EAAA,QAAA,SAAA,CACA,GAAA,GAAA,EAAA,QAAA,SAAA,WAAA,MAAA,IAEA,GAAA,YAAA,KACA,EAAA,SAAA,GACA,EAAA,QAAA,GACA,EAAA,SAAA,SAAA,EAAA,KACA,EAAA,WAAA,EAAA,OAAA,EAAA,SAAA,EAAA,IAAA,GACA,EAAA,WAAA,GACA,EAAA,gBAAA,GAEA,GAAA,EAAA,QAAA,UAAA,GAAA,EAAA,QAAA,OAAA,CACA,GAAA,GAAA,EAAA,QAAA,OAAA,WAAA,MAAA,IAEA,GAAA,YAAA,KACA,EAAA,SAAA,GACA,EAAA,QAAA,GACA,EAAA,SAAA,SAAA,EAAA,KACA,EAAA,WAAA,EAAA,OAAA,EAAA,SAAA,EAAA,IAAA,GACA,EAAA,WAAA,GACA,EAAA,gBAAA,GAGA,EAAA,UAAA,EAAA,WACA,EAAA,QAAA,GAIA,GACA,EAAA,QAAA,mBAEA,EAAA,gBAEA,GAAA,IAEA,EAAA,eAAA,MAAA,WAAA,EAAA,WACA,EAAA,eAAA,IAAA,WAAA,EAAA,YAIA,CACA,GAAA,GAAA,EAAA,UAAA,KAAA,EAAA,uBACA,IAAA,EAAA,OAAA,CACA,EAAA,OAEA,IAAA,GAAA,GAAA,MAAA,EAGA,KADA,KAAA,KAAA,KAAA,EAAA,WACA,EAAA,UAAA,EAAA,WAAA,CACA,GAAA,GAAA,GAAA,MAAA,EACA,GAAA,QAAA,EAAA,UAAA,IAAA,EAAA,UAEA,KAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,GAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,QAAA,gBAAA,KACA,EACA,EAAA,EAAA,EAAA,WAAA,EAAA,UAAA,EAAA,WAAA,EAAA,UAEA,GAAA,OAAA,GAGA,EAAA,QAAA,EAAA,UAAA,IAAA,EAAA,YAIA,EAAA,gBACA,MAAA,EACA,IAAA,GAIA,MAAA,GAAA,gBAGA,EAAA,YAAA,WACA,EAAA,GAAA,KACA,IAAA,GAAA,EAAA,iBACA,EAAA,EAAA,aAAA,GAAA,MAAA,EAAA,kBAEA,OAAA,IAAA,QAAA,UACA,EAAA,QAAA,KACA,EACA,EACA,SAAA,GACA,GAAA,GAAA,EAAA,eAAA,GACA,EAAA,EAAA,cAAA,GACA,EAAA,EAAA,gBAAA,EAAA,GAEA,EAAA,EAAA,UAAA,KAAA,EAAA,qBACA,EAAA,EAAA,UAAA,KAAA,EAAA,sBACA,GAAA,OAEA,IAAA,GAAA,EAAA,QAAA,mBAAA,KAAA,EAAA,EAAA,EAAA,EACA,GAAA,QAAA,OAAA,EAEA,IAAA,GAAA,GAAA,MAAA,EAAA,OACA,EAAA,GAAA,MAAA,EAAA,IAEA,IAAA,GAAA,EAAA,OAAA,CACA,GAAA,GAAA,EACA,EAAA,EAAA,eAAA,SAAA,GAAA,MA4CA,KA1CA,EAAA,KAAA,EAAA,SAAA,EAAA,GACA,KAAA,EAAA,QAAA,EAAA,GAAA,QAAA,GAAA,CACA,GAAA,GAAA,EAAA,OAEA,GAAA,QAAA,EAAA,KAAA,WACA,EAAA,SAAA,EAAA,KAAA,YACA,EAAA,YAAA,EAAA,KAAA,eAEA,EAAA,QAAA,EAAA,KAAA,WACA,EAAA,SAAA,EAAA,KAAA,YACA,EAAA,YAAA,EAAA,KAAA,eAEA,EAAA,UAAA,EAAA,WACA,EAAA,QAAA,EAAA,UAAA,EAGA,IAAA,GAAA,EAAA,QAAA,oBAAA,KAAA,EAAA,EAAA,KACA,GAAA,OAAA,GAEA,EAAA,eAAA,SAAA,IAAA,GACA,EAAA,SAAA,QAGA,IAAA,GAAA,EAAA,QAAA,aAAA,KAAA,GAAA,EAAA,UAAA,EAAA,WAAA,KAAA,GAAA,EACA,GAAA,OAAA,GAEA,IAGA,EAAA,QAAA,EAAA,GAAA,SAAA,GACA,EAAA,OAGA,IAAA,GAAA,EAAA,QAAA,UAAA,KAAA,EAAA,EAAA,EAAA,EACA,GAAA,OAAA,GACA,IAEA,GAAA,GACA,EAAA,SAAA,WAIA,EAAA,QAAA,CACA,GAAA,GAAA,EAAA,OAEA,GAAA,QAAA,EAAA,KAAA,WACA,EAAA,SAAA,EAAA,KAAA,YACA,EAAA,YAAA,EAAA,KAAA,eAEA,EAAA,QAAA,EAAA,KAAA,WACA,EAAA,SAAA,EAAA,KAAA,YACA,EAAA,YAAA,EAAA,KAAA,eAEA,EAAA,UAAA,EAAA,WACA,EAAA,QAAA,EAAA,UAAA,EAGA,IAAA,GAAA,EAAA,QAAA,oBAAA,KAAA,EAAA,EAAA,KACA,GAAA,OAAA,GAEA,EAAA,eAAA,SAAA,IAAA,GACA,EAAA,SAAA,QAGA,IAAA,GAAA,EAAA,QAAA,aAAA,KAAA,GAAA,EAAA,UAAA,EAAA,WAAA,KAAA,GAAA,EACA,GAAA,OAAA,GAEA,IAGA,GAAA,IAAA,EAAA,KAAA,UAAA,IAAA,MAAA,MACA,GAAA,EAAA,OAAA,SAAA,GACA,OAAA,wBAAA,KAAA,KAEA,EAAA,KAAA,mBAAA,GACA,EAAA,KAAA,QAAA,EAAA,KAAA,UAGA,GAAA,OAAA,EAAA,QAAA,qBAAA,EAAA,GAAA,KAGA,GAAA,UAAA,QAAA,qBAAA,MAKA,EAAA,mBAAA,aAIA,EAAA,eAAA,EAAA,UAAA,KAAA,EAAA,QAAA,wBACA,EAAA,eAAA,SAAA,yBACA,EAAA,eAAA,MAAA,WACA,MAAA,GAAA,iBAAA,WAAA,EAAA,aAAA,WACA,GAEA,EAAA,aAAA,EAAA,kBACA,EAAA,cACA,EAAA,iBAAA,WAAA,EAAA,aAAA,WACA,EAAA,eAAA,SAAA,0BAEA,KAGA,EAAA,WAAA,EAAA,UAAA,KAAA,EAAA,QAAA,oBACA,EAAA,WAAA,MAAA,WAIA,MAHA,GAAA,aAAA,EAAA,kBACA,EAAA,cACA,EAAA,eAAA,YAAA,0BACA,GAGA,IAAA,GAAA,WACA,EAAA,UACA,YAAA,sBACA,SAAA,wBACA,IAAA,qBAAA,GAEA,GAAA,UAAA,GAAA,qBAAA,GAEA,EAAA,cAEA,EAAA,QAAA,WAAA,GACA,YACA,WACA,EAAA,sBAEA,IAAA,EAAA,QAAA,SAIA,EAAA,KAAA,QAAA,EAAA,MACA,EAAA,GAEA,OAEA","file":"jquery.goboo-client.js","sourcesContent":["/*\n * GoBoo - GET IT. BOOK IT. [http://goboo.de]\n *\n * (c) Tristan Lins <t.lins@goboo.de>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * jquery client for {@link http://goboo.de goboo - GET IT. BOOK IT}\n *\n * online booking system by karo media\n *\n * @module goboo/Client/jQuery\n * @copyright 2014 {@link mailto:t.lins@goboo.de Tristan Lins}\n * @license {@link http://opensource.org/licenses/MIT MIT}\n * @author Tristan Lins <t.lins@goboo.de>\n * @link http://goboo.de\n */\n\n(function ($) {\n    \"use strict\";\n\n    $.gobooSlotDetails = {};\n    $.gobooSlotDetails.defaultOptions = {\n        /** id of room */\n        'room': '',\n        /** id of slot */\n        'slot': '',\n\n        'bookingMask': false,\n\n        /** start datetime format */\n        'startDateTimeFormat': 'dd. MM \\'\\'y hh:ii',\n        /** end datetime format */\n        'endDateTimeFormat': '',\n        /** datetime format */\n        'timeFormat': '{start} - {duration}',\n        /** duration datetime format */\n        'durationDateTimeFormat': 'hh:ii',\n        /** play time datetime format */\n        'playTimeDateTimeFormat': 'hh:ii',\n\n        /** selector to id container */\n        'idSelector': '[data-goboo=\"id\"]',\n        /** selector to start datetime container */\n        'startDateTimeSelector': '[data-goboo=\"start-datetime\"]',\n        /** selector to end datetime container */\n        'endDateTimeSelector': '[data-goboo=\"end-datetime\"]',\n        /** selector to duration container */\n        'durationSelector': '[data-goboo=\"duration\"]',\n        /** selector to play time container */\n        'playTimeSelector': '[data-goboo=\"play-time\"]',\n        /** selector to capacity container */\n        'capacitySelector': '[data-goboo=\"capacity\"]',\n        /** selector to attendance container */\n        'attendanceSelector': '[data-goboo=\"attendance\"]',\n        /** selector to availableModes container */\n        'modesSelector': '[data-goboo=\"modes\"]',\n\n        /** selector to time container */\n        'timeSelector': '[data-goboo=\"time\"]',\n        /** selector to duration datetime container */\n        'durationDateTimeSelector': '[data-goboo=\"duration-datetime\"]',\n        /** selector to play time datetime container */\n        'playTimeDateTimeSelector': '[data-goboo=\"play-time-datetime\"]',\n\n        /** selector to book action element */\n        'bookActionSelector': '.goboo_book_action',\n\n        'idFormatter': function(id, slot, options) {\n            return id;\n        },\n        'startDateTimeFormatter': function(startDateTime, slot, options) {\n            return $.formatDateTime(options.startDateTimeFormat, startDateTime);\n        },\n        'endDateTimeFormatter': function(endDateTime, slot, options) {\n            return $.formatDateTime(options.endDateTimeFormat, endDateTime);\n        },\n        'durationFormatter': function(duration, slot, options) {\n            return Math.round(duration);\n        },\n        'playTimeFormatter': function(playTime, slot, options) {\n            return Math.round(playTime);\n        },\n        'capacityFormatter': function(capacity, slot, options) {\n            return capacity;\n        },\n        'attendanceFormatter': function(attendance, slot, options) {\n            return attendance;\n        },\n        'modesFormatter': function(modes, slot, options) {\n            var elements = [];\n\n            var maxVotes = 0;\n            $.each(modes, function(token, mode) {\n                if ((mode.getMinAttendance() === null || slot.getAttendance() >= mode.getMinAttendance()) &&\n                    (mode.getMaxAttendance() === null || slot.getAttendance() <= mode.getMaxAttendance())) {\n                    maxVotes = Math.max(mode.getVotes(), maxVotes);\n                }\n            });\n            $.each(modes, function(token, mode) {\n                var abbr = $('<abbr></abbr>')\n                    .attr('title', mode.getDescription())\n                    .attr('data-goboo-votes', mode.getVotes())\n                    .text(mode.getLabel());\n\n                if (mode.getMinAttendance() !== null && slot.getAttendance() < mode.getMinAttendance() ||\n                    mode.getMaxAttendance() !== null && slot.getAttendance() > mode.getMaxAttendance()) {\n                    abbr.addClass('goboo_mode_invalid');\n                }\n                else if (maxVotes > 0 && mode.getVotes() >= maxVotes) {\n                    abbr.addClass('goboo_mode_prefered');\n                }\n\n                elements.push(abbr.get(0));\n            });\n\n            return elements;\n        },\n        'timeFormatter': function(slot, options) {\n            return options.patternFormatter(options.timeFormat, slot, options);\n        },\n        'durationDateTimeFormatter': function(duration, slot, options) {\n            var hours = parseInt(duration / 60);\n            var minutes = duration % 60;\n            var durationDateTime = new Date();\n            durationDateTime.setTime(0);\n            durationDateTime.setHours(hours);\n            durationDateTime.setMinutes(minutes);\n            durationDateTime.setSeconds(0);\n            return $.formatDateTime(options.durationDateTimeFormat, durationDateTime);\n        },\n        'playTimeDateTimeFormatter': function(playTime, slot, options) {\n            var hours = parseInt(playTime / 60);\n            var minutes = playTime % 60;\n            var playTimeDateTime = new Date();\n            playTimeDateTime.setTime(0);\n            playTimeDateTime.setHours(hours);\n            playTimeDateTime.setMinutes(minutes);\n            playTimeDateTime.setSeconds(0);\n            return $.formatDateTime(options.playTimeDateTimeFormat, playTimeDateTime);\n        },\n        'patternFormatter': function(buffer, slot, options) {\n            var elements = [];\n            var rgxp = /\\{\\w+\\}/;\n            var pos;\n            while ((pos = buffer.search(rgxp)) !== -1) {\n                var pre = buffer.substr(0, pos);\n                buffer = buffer.substr(pos);\n\n                if (pre) {\n                    elements.push(document.createTextNode(pre));\n                }\n\n                pos = buffer.search('}');\n                var field = buffer.substring(1, pos);\n                var value = options.fieldFormatter(field, slot, options);\n                if ($.isArray(value)) {\n                    $.each(value, function(index, element) {\n                        elements.push(element);\n                    });\n                }\n                else {\n                    elements.push(document.createTextNode(value));\n                }\n\n                buffer = buffer.substr(pos+1);\n            }\n\n            if (buffer) {\n                elements.push(document.createTextNode(buffer));\n            }\n\n            return elements;\n        },\n        'fieldFormatter': function (field, slot, options) {\n            switch (field) {\n                case 'id':\n                    return options.idFormatter(slot.getId(), slot, options);\n                    break;\n                case 'start':\n                case 'startDateTime':\n                    return options.startDateTimeFormatter(slot.getStartDateTime(), slot, options);\n                    break;\n                case 'end':\n                case 'endDateTime':\n                    return options.endDateTimeFormatter(slot.getEndDateTime(), slot, options);\n                    break;\n                case 'duration':\n                    return options.durationFormatter(slot.getDuration(), slot, options);\n                    break;\n                case 'playTime':\n                    return options.playTimeFormatter(slot.getPlayTime() || slot.getDuration(), slot, options);\n                    break;\n                case 'durationDateTime':\n                    return options.durationDateTimeFormatter(slot.getDuration(), slot, options);\n                    break;\n                case 'playTimeDateTime':\n                    return options.playTimeDateTimeFormatter(slot.getPlayTime() || slot.getDuration(), slot, options);\n                    break;\n                case 'capacity':\n                    return options.capacityFormatter(slot.getCapacity(), slot, options);\n                    break;\n                case 'attendance':\n                    return options.attendanceFormatter(slot.getAttendance(), slot, options);\n                    break;\n                case 'modes':\n                case 'availableModes':\n                    return options.modesFormatter(slot.getAvailableModes(), slot, options);\n                    break;\n                default:\n                    var formatter = field + 'Formatter';\n                    if (options[formatter]) {\n                        return options[formatter](slot, options);\n                    }\n                    throw \"Could not format slot field \" + field + \", no formatter available!\";\n            }\n        },\n\n        'showBookingMask': function(slot) {\n            alert('You must define the showBookingMask(slot) function!');\n        },\n\n        'preRender': function() {\n        },\n        'postRender': function() {\n            var players = this.container.find('.goboo_players');\n\n            if (players.size()) {\n                var classes = \"\" + players.prop('class');\n                classes = classes.replace(/goboo_players_count_\\d+/, '');\n                classes = classes.replace(/goboo_players_\\d+/, '');\n                players.prop('class', classes);\n                players\n                    .addClass('goboo_players_count_' + this.currentSlot.getCapacity())\n                    .addClass('goboo_players_' + this.currentSlot.getAttendance());\n\n                players.find('*[data-goboo=\"attendance\"]').text(this.currentSlot.getAttendance());\n            }\n        },\n        'renderBookAction': function() {\n            var self = this;\n            var selector = this.options.bookActionSelector;\n            var button = this.container.find(selector);\n\n            if (this.currentSlot.getAttendance() >= this.currentSlot.getCapacity()) {\n                button.addClass('goboo_disabled');\n            }\n            else {\n                button.removeClass('goboo_disabled');\n            }\n\n            button.off('click');\n            button.click(function(e) {\n                e.preventDefault();\n                self.options.showBookingMask.call(self, self.currentSlot);\n            });\n        },\n        'render': function() {\n            var self = this;\n            var slot = self.currentSlot;\n            self.options.preRender.call(self);\n\n            var selectors = {};\n            var selectorRegexp = /^(\\w+)Selector$/;\n            var actionRegexp = /Action$/;\n            $.each(self.options, function(key, value) {\n                var match = selectorRegexp.exec(key);\n                if (match && !actionRegexp.test(match[1])) {\n                    selectors[match[1]] = value;\n                }\n            });\n            $.each(selectors, function(field, selector) {\n                var elements = self.container.find(selector);\n                if (elements.length) {\n                    var value = self.options.fieldFormatter(field, slot, self.options);\n\n                    elements\n                        .empty()\n                        .append(value);\n                }\n            });\n\n            self.options.renderBookAction.call(self);\n\n            self.options.postRender.call(self);\n        }\n    };\n\n    /**\n     * Create a new booking mask to integrate goboo booking system.\n     *\n     * @memberOf jQuery\n     * @access public\n     * @param object options\n     */\n    $.fn.gobooSlotDetails = function (options) {\n        if (!goboo.env.adapter) {\n            throw 'You need to initialize the goboo environment first!';\n        }\n\n        var element = $(this[0]);\n        var templateOptions = {};\n        $.each(\n            {\n                'room': 'room',\n                'slot': 'slot',\n                'bookingMask': 'booking-mask',\n                'startDateTimeFormat': 'start-datetime-format',\n                'endDateTimeFormat': 'end-datetime-format',\n                'timeFormat': 'date-format',\n                'durationDateTimeFormat': 'duration-time-format',\n                'playTimeDateTimeFormat': 'play-time-time-format',\n                'idSelector': 'id-selector',\n                'startDateTimeSelector': 'start-datetime-selector',\n                'endDateTimeSelector': 'end-datetime-selector',\n                'durationSelector': 'duration-selector',\n                'playTimeSelector': 'play-time-selector',\n                'capacitySelector': 'capacity-selector',\n                'attendanceSelector': 'attendance-selector',\n                'modesSelector': 'modes-selector',\n                'timeSelector': 'time-selector',\n                'durationDateTimeSelector': 'duration-datetime-selector',\n                'playTimeDateTimeSelector': 'play-time-datetime-selector',\n                'bookActionSelector': 'book-action-selector'\n            },\n            function(option, key) {\n                var value = element.data('goboo-' + key);\n                if (value !== undefined && value !== null) {\n                    templateOptions[option] = value;\n                }\n            }\n        );\n\n        options = $.extend({}, $.gobooSlotDetails.defaultOptions, options || {}, templateOptions);\n\n        new (function(container, options) {\n            var self = this;\n            self.container = container;\n            self.options = options;\n            self.currentSlot = null;\n\n            self.loadSlot = function(slot) {\n                if (!slot) {\n                    self.options.slot = null;\n                    self.currentSlot = null;\n                    self.container\n                        .removeClass('goboo_loading')\n                        .addClass('goboo_no_slot');\n                    self.container.trigger('goboo:slot-details:change-slot', null);\n                }\n                else if (slot instanceof goboo.Slot) {\n                    self.options.slot = slot.getId();\n                    self.currentSlot = slot;\n                    options.render.call(self);\n                    self.container\n                        .removeClass('goboo_loading')\n                        .removeClass('goboo_no_slot');\n                    self.container.trigger('goboo:slot-details:change-slot', slot);\n                }\n                else {\n                    self.container.addClass('goboo_loading');\n                    goboo.env.adapter.getSlot(\n                        self.options.room,\n                        slot,\n                        function(slot) {\n                            self.loadSlot(slot);\n                        }\n                    );\n                }\n            };\n\n            container.data(\n                'goboo',\n                {\n                    'options': options,\n                    'setSlot': function (slot, room) {\n                        if (room !== undefined) {\n                            options.room = room;\n                        }\n                        options.slot = slot;\n                        self.loadSlot(options.slot);\n                    }\n                }\n            );\n\n            if (options.room && options.slot) {\n                self.loadSlot(options.slot);\n            }\n            self.container.removeClass('goboo_initializing');\n        })(element, options);\n\n        return this;\n    };\n})(jQuery);\n","/*\n * GoBoo - GET IT. BOOK IT. [http://goboo.de]\n *\n * (c) Tristan Lins <t.lins@goboo.de>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * jquery client for {@link http://goboo.de goboo - GET IT. BOOK IT}\n *\n * online booking system by karo media\n *\n * @module goboo/Client/jQuery\n * @copyright 2014 {@link mailto:t.lins@goboo.de Tristan Lins}\n * @license {@link http://opensource.org/licenses/MIT MIT}\n * @author Tristan Lins <t.lins@goboo.de>\n * @link http://goboo.de\n */\n\n(function ($) {\n    \"use strict\";\n\n    $.gobooBookingMask = {};\n    $.gobooBookingMask.defaultOptions = {\n        /** id of room */\n        'room': '',\n        /** id of slot */\n        'slot': '',\n\n        'bookingMask': false,\n\n        /**\n         * define how successors can be selected,\n         *\n         * false          - disable successors selection (you need to remove the HTML from the template)\n         * 'subsequent'   - only select subsequent slots (radio)\n         * 'undetermined' - the successors are free to choose (checkbox)\n         */\n        'successorsSelectionMode': 'subsequent',\n        /**\n         * Label for the \"no more slots\" selection in \"subsequent\" selection mode.\n         */\n        'successorNoSelectionLabel': '-',\n\n        /** start datetime format */\n        'startDateTimeFormat': 'dd. MM \\'\\'y hh:ii',\n        /** end datetime format */\n        'endDateTimeFormat': '',\n        /** datetime format */\n        'timeFormat': '{start} - {duration}',\n        /** duration datetime format */\n        'durationDateTimeFormat': 'hh:ii',\n        /** play time datetime format */\n        'playTimeDateTimeFormat': 'hh:ii',\n        /** successor datetime format */\n        'successorDateTimeFormat': 'hh:ii',\n\n        /** selector to id container */\n        'idSelector': '[data-goboo=\"id\"]',\n        /** selector to start datetime container */\n        'startDateTimeSelector': '[data-goboo=\"start-datetime\"]',\n        /** selector to end datetime container */\n        'endDateTimeSelector': '[data-goboo=\"end-datetime\"]',\n        /** selector to playTime container */\n        'durationSelector': '[data-goboo=\"duration\"]',\n        /** selector to play time container */\n        'playTimeSelector': '[data-goboo=\"play-time\"]',\n        /** selector to capacity container */\n        'capacitySelector': '[data-goboo=\"capacity\"]',\n        /** selector to attendance container */\n        'attendanceSelector': '[data-goboo=\"attendance\"]',\n        /** selector to availableModes container */\n        'modesSelector': '[data-goboo=\"modes\"]',\n\n        /** selector to time container */\n        'timeSelector': '[data-goboo=\"time\"]',\n        /** selector to duration datetime container */\n        'durationDateTimeSelector': '[data-goboo=\"duration-datetime\"]',\n        /** selector to play time datetime container */\n        'playTimeDateTimeSelector': '[data-goboo=\"play-time-datetime\"]',\n\n        /** selector to form element */\n        'formInputSelector': 'form',\n        /** selector to name input element */\n        'nameInputSelector': 'input[name=\"name\"]',\n        /** selector to mobile input element */\n        'mobileInputSelector': 'input[name=\"mobile\"]',\n        /** selector to email input element */\n        'emailInputSelector': 'input[name=\"email\"]',\n        /** selector to street input element */\n        'streetInputSelector': 'input[name=\"street\"]',\n        /** selector to postcode input element */\n        'postcodeInputSelector': 'input[name=\"postcode\"]',\n        /** selector to city input element */\n        'cityInputSelector': 'input[name=\"city\"]',\n        /** selector to mode vote input element */\n        'modeInputSelector': '.goboo_game_mode_vote',\n        /** selector to player count input element */\n        'playerCountInputSelector': 'select[name=\"player_count\"]',\n        /** selector to players input element */\n        'playersInputSelector': '#goboo_players',\n        /** selector to exclusive input element */\n        'exclusiveInputSelector': 'input[name=\"exclusive\"]',\n        /** selector to successors loader element */\n        'successorsLoaderActionSelector': '.goboo_booking_successors_loader',\n        /** selector to successors selection container element */\n        'successorsContainerInputSelector': '.goboo_booking_successors_selection',\n        /** selector to notes input element */\n        'notesInputSelector': 'input[name=\"notes\"],textarea[name=\"notes\"]',\n\n        /** selector to book action button element */\n        'bookActionSelector': '.goboo_book_action',\n\n        'idFormatter': function(id, slot, options) {\n            return id;\n        },\n        'startDateTimeFormatter': function(startDateTime, slot, options) {\n            return $.formatDateTime(options.startDateTimeFormat, startDateTime);\n        },\n        'endDateTimeFormatter': function(endDateTime, slot, options) {\n            return $.formatDateTime(options.endDateTimeFormat, endDateTime);\n        },\n        'durationFormatter': function(duration, slot, options) {\n            return Math.round(duration);\n        },\n        'playTimeFormatter': function(playTime, slot, options) {\n            return Math.round(playTime);\n        },\n        'capacityFormatter': function(capacity, slot, options) {\n            return capacity;\n        },\n        'attendanceFormatter': function(attendance, slot, options) {\n            return attendance;\n        },\n        'modesFormatter': function(modes, slot, options) {\n            var elements = [];\n\n            var maxVotes = 0;\n            $.each(modes, function(token, mode) {\n                if ((mode.getMinAttendance() === null || slot.getAttendance() >= mode.getMinAttendance()) &&\n                    (mode.getMaxAttendance() === null || slot.getAttendance() <= mode.getMaxAttendance())) {\n                    maxVotes = Math.max(mode.getVotes(), maxVotes);\n                }\n            });\n            $.each(modes, function(token, mode) {\n                var abbr = $('<abbr></abbr>')\n                    .attr('title', mode.getDescription())\n                    .attr('data-goboo-votes', mode.getVotes())\n                    .text(mode.getLabel());\n\n                if (mode.getMinAttendance() !== null && slot.getAttendance() < mode.getMinAttendance() ||\n                    mode.getMaxAttendance() !== null && slot.getAttendance() > mode.getMaxAttendance()) {\n                    abbr.addClass('goboo_mode_invalid');\n                }\n                else if (maxVotes > 0 && mode.getVotes() >= maxVotes) {\n                    abbr.addClass('goboo_mode_prefered');\n                }\n\n                elements.push(abbr.get(0));\n            });\n\n            return elements;\n        },\n        'timeFormatter': function(slot, options) {\n            return options.patternFormatter(options.timeFormat, slot, options);\n        },\n        'durationDateTimeFormatter': function(duration, slot, options) {\n            var hours = parseInt(duration / 60);\n            var minutes = duration % 60;\n            var durationDateTime = new Date();\n            durationDateTime.setTime(0);\n            durationDateTime.setHours(hours);\n            durationDateTime.setMinutes(minutes);\n            durationDateTime.setSeconds(0);\n            return $.formatDateTime(options.durationDateTimeFormat, durationDateTime);\n        },\n        'playTimeDateTimeFormatter': function(playTime, slot, options) {\n            var hours = parseInt(playTime / 60);\n            var minutes = playTime % 60;\n            var playTimeDateTime = new Date();\n            playTimeDateTime.setTime(0);\n            playTimeDateTime.setHours(hours);\n            playTimeDateTime.setMinutes(minutes);\n            playTimeDateTime.setSeconds(0);\n            return $.formatDateTime(options.playTimeDateTimeFormat, playTimeDateTime);\n        },\n        'patternFormatter': function(buffer, slot, options) {\n            var elements = [];\n            var rgxp = /\\{\\w+\\}/;\n            var pos;\n            while ((pos = buffer.search(rgxp)) !== -1) {\n                var pre = buffer.substr(0, pos);\n                buffer = buffer.substr(pos);\n\n                if (pre) {\n                    elements.push(document.createTextNode(pre));\n                }\n\n                pos = buffer.search('}');\n                var field = buffer.substring(1, pos);\n                var value = options.fieldFormatter(field, slot, options);\n                if ($.isArray(value)) {\n                    $.each(value, function(index, element) {\n                        elements.push(element);\n                    });\n                }\n                else {\n                    elements.push(document.createTextNode(value));\n                }\n\n                buffer = buffer.substr(pos+1);\n            }\n\n            if (buffer) {\n                elements.push(document.createTextNode(buffer));\n            }\n\n            return elements;\n        },\n        'fieldFormatter': function (field, slot, options) {\n            switch (field) {\n                case 'id':\n                    return options.idFormatter(slot.getId(), slot, options);\n                    break;\n                case 'start':\n                case 'startDateTime':\n                    return options.startDateTimeFormatter(slot.getStartDateTime(), slot, options);\n                    break;\n                case 'end':\n                case 'endDateTime':\n                    return options.endDateTimeFormatter(slot.getEndDateTime(), slot, options);\n                    break;\n                case 'duration':\n                    return options.durationFormatter(slot.getDuration(), slot, options);\n                    break;\n                case 'playTime':\n                    return options.durationFormatter(slot.getPlayTime() || slot.getDuration(), slot, options);\n                    break;\n                case 'durationDateTime':\n                    return options.durationDateTimeFormatter(slot.getDuration(), slot, options);\n                    break;\n                case 'playTimeDateTime':\n                    return options.playTimeDateTimeFormatter(slot.getPlayTime() || slot.getDuration(), slot, options);\n                    break;\n                case 'capacity':\n                    return options.capacityFormatter(slot.getCapacity(), slot, options);\n                    break;\n                case 'attendance':\n                    return options.attendanceFormatter(slot.getAttendance(), slot, options);\n                    break;\n                case 'modes':\n                case 'availableModes':\n                    return options.modesFormatter(slot.getAvailableModes(), slot, options);\n                    break;\n                default:\n                    var formatter = field + 'Formatter';\n                    if (options[formatter]) {\n                        return options[formatter](slot, options);\n                    }\n                    throw \"Could not format slot field \" + field + \", no formatter available!\";\n            }\n        },\n\n        'preRender': function() {\n        },\n        'postRender': function() {\n            var players = this.container.find('.goboo_players');\n\n            if (players.size()) {\n                var classes = \"\" + players.prop('class');\n                classes = classes.replace(/goboo_players_count_\\d+/, '');\n                classes = classes.replace(/goboo_players_\\d+/, '');\n                players.prop('class', classes);\n                players\n                    .addClass('goboo_players_count_' + this.currentSlot.getCapacity())\n                    .addClass('goboo_players_' + (1 + this.currentSlot.getAttendance()));\n\n                players.find('*[data-goboo=\"attendance\"]').text(1 + this.currentSlot.getAttendance());\n            }\n        },\n        'renderForm': function(slot, callback) {\n            var selector = this.options.formInputSelector;\n            callback(this.container.find(selector));\n        },\n        'renderNameInput': function(slot, callback) {\n            var selector = this.options.nameInputSelector;\n            callback(this.container.find(selector));\n        },\n        'renderMobileInput': function(slot, callback) {\n            var selector = this.options.mobileInputSelector;\n            callback(this.container.find(selector));\n        },\n        'renderEmailInput': function(slot, callback) {\n            var selector = this.options.emailInputSelector;\n            callback(this.container.find(selector));\n        },\n        'renderStreetInput': function(slot, callback) {\n            var selector = this.options.streetInputSelector;\n            callback(this.container.find(selector));\n        },\n        'renderPostcodeInput': function(slot, callback) {\n            var selector = this.options.postcodeInputSelector;\n            callback(this.container.find(selector));\n        },\n        'renderCityInput': function(slot, callback) {\n            var selector = this.options.cityInputSelector;\n            callback(this.container.find(selector));\n        },\n        'renderModeInput': function(slot, callback) {\n            if (this.currentSlot.getAvailableModes().length) {\n                this.container.removeClass('goboo_no_modes');\n\n                if (!this.modeVoteDummy) {\n                    var selector = this.options.modeInputSelector;\n                    this.modeVoteDummy = this.container.find(selector);\n                    this.modeVoteContainer = this.modeVoteDummy.parent();\n                    this.modeVoteDummy.detach();\n                }\n\n                if (this.modeVoteDummy) {\n                    this.modeVoteContainer.empty();\n\n                    var modes = this.currentSlot.getAvailableModes();\n                    var elements = [];\n                    $.each(modes, $.proxy(function(index, mode) {\n                        var element = this.modeVoteDummy.clone();\n                        element.find('input').val(mode.getToken());\n                        element.append(' ').append(mode.getDescription());\n                        elements.push(element.get(0));\n                    }, this));\n                }\n\n                this.modeVoteContainer.append(elements);\n\n                callback($(elements));\n            }\n            else {\n                this.container.addClass('goboo_no_modes');\n                callback($());\n            }\n        },\n        'renderPlayerCountInput': function(slot, callback) {\n            var selector = this.options.playerCountInputSelector;\n            var select = this.container.find(selector);\n\n            select.empty();\n            for (var count = 1; count <= (slot.getCapacity() - slot.getAttendance()); count ++) {\n                select.append($('<option></option>').val(count).text(count + ' Spieler'));\n            }\n\n            callback(select);\n        },\n        'renderPlayersInput': function(slot, callback) {\n            var playerCountSelector = this.options.playerCountInputSelector;\n            var playerCountInput    = this.container.find(playerCountSelector);\n\n            var playersSelector = this.options.playersInputSelector;\n            var playersList     = this.container.find(playersSelector);\n\n            playersList = playersList\n                .clone(false, false)\n                .replaceAll(playersList);\n\n            playersList.empty();\n            playersList.tagit({\n                placeholderText: 'Nickname...',\n                beforeTagAdded: function(event, ui) {\n                    var tags     = playersList.tagit(\"assignedTags\");\n                    var tagCount = tags.length;\n\n                    return (slot.getCapacity() - slot.getAttendance()) > tagCount;\n                },\n                afterTagAdded: function(event, ui) {\n                    var tags     = playersList.tagit(\"assignedTags\");\n                    var tagCount = tags.length;\n\n                    if (playerCountInput.val() < tagCount) {\n                        playerCountInput.val(tagCount).change();\n                    }\n                }\n            });\n\n            callback(playersList);\n        },\n        'renderExclusiveInput': function(slot, callback) {\n            var selector = this.options.playerCountInputSelector;\n            var select = this.container.find(selector);\n\n            selector = this.options.exclusiveInputSelector;\n            var input = this.container.find(selector);\n\n            if (slot.getAttendance() > 0) {\n                input.prop('disabled', true);\n            }\n            else {\n                var self = this;\n\n                input.prop('disabled', false);\n                input.off('change').change(function() {\n                    if (input.prop('checked')) {\n                        var players = self.container.find('.goboo_players');\n\n                        if (players.size()) {\n                            var classes = \"\" + players.prop('class');\n                            classes = classes.replace(/goboo_players_count_\\d+/, '');\n                            classes = classes.replace(/goboo_players_\\d+/, '');\n                            players.prop('class', classes);\n                            players\n                                .addClass('goboo_players_count_' + slot.getCapacity())\n                                .addClass('goboo_players_' + slot.getCapacity());\n\n                            players.find('*[data-goboo=\"attendance\"]').text(slot.getCapacity());\n                        }\n\n\n                        select.prop('disabled', true);\n                    }\n                    else {\n                        select.prop('disabled', false);\n                        select.change();\n                    }\n                });\n            }\n\n            input.prop('checked', false);\n\n            callback(input);\n        },\n        'renderSuccessorsInput': function(slot, callback) {\n            if (!this.options.successorsSelectionMode) {\n                callback(false);\n                return;\n            }\n\n            var self = this;\n\n            var loaderSelector = this.options.successorsLoaderActionSelector;\n            var loaderContainer = this.container.find(loaderSelector);\n\n            var selectionContainerSelector = this.options.successorsContainerInputSelector;\n            var selectionContainer = this.container.find(selectionContainerSelector);\n\n            loaderContainer.show();\n            selectionContainer.empty().hide();\n            goboo.env.adapter.listSlotSuccessors(slot, false, function(slots) {\n                var inputs = $();\n\n                if (self.options.successorsSelectionMode == 'subsequent') {\n                    var input = $('<input>')\n                        .attr('type', 'radio')\n                        .attr('name', 'successors')\n                        .prop('checked', true);\n\n                    var label = $('<label></label>');\n                    label\n                        .append(input)\n                        .append(' ')\n                        .append(self.options.successorNoSelectionLabel);\n\n                    var row = $('<div class=\"goboo_radio\"></div>')\n                    row.append(label);\n\n                    selectionContainer.append(row);\n                }\n\n                for (var index in slots) {\n                    var slot = slots[index];\n\n                    var input = $('<input>');\n\n                    if (self.options.successorsSelectionMode == 'undetermined') {\n                        input.attr('type', 'checkbox');\n                    }\n                    else if (self.options.successorsSelectionMode == 'subsequent') {\n                        input.attr('type', 'radio');\n                    }\n                    else {\n                        throw 'Unsupported successors selection mode: ' + self.options.successorsSelectionMode;\n                    }\n\n                    input.data('slot', slot);\n                    input.attr('name', 'successors');\n                    input.val(slot.getId());\n                    inputs.push(input);\n\n                    var label = $('<label></label>');\n                    label\n                        .append(input)\n                        .append(' ')\n                        .append($.formatDateTime(self.options.successorDateTimeFormat, slot.getStartDateTime()));\n\n                    var row = $('<div class=\"goboo_radio\"></div>')\n                    row.append(label);\n\n                    selectionContainer.append(row);\n                }\n\n                loaderContainer.hide();\n                selectionContainer.show();\n\n                callback(inputs);\n            });\n        },\n        'renderNotesInput': function(slot, callback) {\n            var selector = this.options.notesInputSelector;\n            callback(this.container.find(selector));\n        },\n        'renderBookAction': function(slot, callback) {\n            var selector = this.options.bookActionSelector;\n            var button = this.container.find(selector);\n\n            if (slot.getAttendance() >= slot.getCapacity()) {\n                button.addClass('disabled');\n            }\n            else {\n                button.removeClass('disabled');\n            }\n\n            callback(button);\n        },\n        'render': function() {\n            var self = this;\n            var slot = self.currentSlot;\n            self.options.preRender.call(self);\n\n            var selectors = {};\n            var selectorRegexp = /^(\\w+)Selector$/;\n            var skipRegexp = /(Input|Action)$/;\n            $.each(self.options, function(key, value) {\n                var match = selectorRegexp.exec(key);\n                if (match && !skipRegexp.test(match[1])) {\n                    selectors[match[1]] = value;\n                }\n            });\n            $.each(selectors, function(field, selector) {\n                var elements = self.container.find(selector);\n                if (elements.length) {\n                    var value = self.options.fieldFormatter(field, slot, self.options);\n\n                    elements\n                        .empty()\n                        .append(value);\n                }\n            });\n\n            var nameInput = null;\n            var mobileInput = null;\n            var emailInput = null;\n            var streetInput = null;\n            var postcodeInput = null;\n            var cityInput = null;\n            var modeInput = null;\n            var playerCountInput = null;\n            var playersInput = null;\n            var exclusiveInput = null;\n            var notesInput = null;\n            var successorsInputs = null;\n            var bookAction = null;\n\n            var activateForm = function() {\n                if (\n                    nameInput !== null &&\n                    mobileInput !== null &&\n                    emailInput !== null &&\n                    streetInput !== null &&\n                    postcodeInput !== null &&\n                    cityInput !== null &&\n                    modeInput !== null &&\n                    playerCountInput !== null &&\n                    playersInput !== null &&\n                    exclusiveInput !== null &&\n                    notesInput !== null &&\n                    successorsInputs !== null &&\n                    bookAction !== null\n                ) {\n                    bookAction.prop('disabled', false);\n                }\n            };\n\n            self.options.renderNameInput.call(self, slot, function(renderedNameInput) {\n                nameInput = renderedNameInput;\n                activateForm();\n            });\n            self.options.renderMobileInput.call(self, slot, function(renderedMobileInput) {\n                mobileInput = renderedMobileInput;\n                activateForm();\n            });\n            self.options.renderEmailInput.call(self, slot, function(renderedEmailInput) {\n                emailInput = renderedEmailInput;\n                activateForm();\n            });\n            self.options.renderStreetInput.call(self, slot, function(renderedStreetInput) {\n                streetInput = renderedStreetInput;\n                activateForm();\n            });\n            self.options.renderPostcodeInput.call(self, slot, function(renderedPostcodeInput) {\n                postcodeInput = renderedPostcodeInput;\n                activateForm();\n            });\n            self.options.renderCityInput.call(self, slot, function(renderedCityInput) {\n                cityInput = renderedCityInput;\n                activateForm();\n            });\n            self.options.renderModeInput.call(self, slot, function(renderedModeInput) {\n                modeInput = renderedModeInput;\n                activateForm();\n            });\n            self.options.renderPlayerCountInput.call(self, slot, function(renderedPlayerCountInput) {\n                playerCountInput = renderedPlayerCountInput;\n                activateForm();\n            });\n            self.options.renderPlayersInput.call(self, slot, function(renderedPlayersInput) {\n                playersInput = renderedPlayersInput;\n                activateForm();\n            });\n            self.options.renderExclusiveInput.call(self, slot, function(renderedExclusiveInput) {\n                exclusiveInput = renderedExclusiveInput;\n                activateForm();\n            });\n            self.options.renderNotesInput.call(self, slot, function(renderedNotesInput) {\n                notesInput = renderedNotesInput;\n                activateForm();\n            });\n            self.options.renderSuccessorsInput.call(self, slot, function(renderedSuccessorsInput) {\n                successorsInputs = renderedSuccessorsInput;\n                activateForm();\n            });\n            self.options.renderBookAction.call(self, slot, function(renderedBookAction) {\n                bookAction = renderedBookAction;\n                bookAction.prop('disabled', true);\n                activateForm();\n            });\n\n            self.options.renderForm.call(self, slot, function(form) {\n                form.off('submit');\n                form.submit(function(e) {\n                    if (bookAction.prop('disabled')) {\n                        return;\n                    }\n\n                    bookAction.prop('disabled', true);\n\n                    e.preventDefault();\n\n                    var booking = new goboo.Booking();\n\n                    self.options.fetchBookingName.call(self, slot, function(name) {\n                        booking.setName(name);\n                    });\n                    self.options.fetchBookingMobile.call(self, slot, function(mobile) {\n                        booking.setMobile(mobile);\n                    });\n                    self.options.fetchBookingEmail.call(self, slot, function(email) {\n                        booking.setEmail(email);\n                    });\n                    self.options.fetchBookingStreet.call(self, slot, function(street) {\n                        booking.setStreet(street);\n                    });\n                    self.options.fetchBookingPostcode.call(self, slot, function(postcode) {\n                        booking.setPostcode(postcode);\n                    });\n                    self.options.fetchBookingCity.call(self, slot, function(city) {\n                        booking.setCity(city);\n                    });\n                    self.options.fetchBookingSlots.call(self, slot, function(slots) {\n                        booking.setSlots(slots);\n                    });\n                    self.options.fetchBookingPlayerCount.call(self, slot, function(attendance) {\n                        booking.setAttendance(attendance);\n                    });\n                    self.options.fetchBookingPlayers.call(self, slot, function(players) {\n                        booking.setPlayers(players);\n                    });\n                    self.options.fetchBookingExclusive.call(self, slot, function(exclusive) {\n                        booking.setExclusive(exclusive);\n                    });\n                    self.options.fetchBookingModes.call(self, slot, function(modes) {\n                        booking.setPreferredModes(modes);\n                    });\n                    self.options.fetchBookingNotes.call(self, slot, function(notes) {\n                        booking.setNotes(notes);\n                    });\n\n                    goboo.env.adapter.bookSlot(\n                        booking,\n                        function(response, xhr) {\n                            bookAction.prop('disabled', false);\n                            self.options.onSuccess.call(self, response, xhr);\n                        },\n                        function(error, xhr) {\n                            bookAction.prop('disabled', false);\n                            self.options.onFailure.call(self, error, xhr);\n                        }\n                    );\n                });\n            });\n\n            self.options.postRender.call(self);\n        },\n\n        'fetchBookingName': function(slot, callback) {\n            var selector = this.options.nameInputSelector;\n            var input    = this.container.find(selector);\n\n            callback(input.val());\n        },\n        'fetchBookingMobile': function(slot, callback) {\n            var selector = this.options.mobileInputSelector;\n            var input    = this.container.find(selector);\n\n            callback(input.val());\n        },\n        'fetchBookingEmail': function(slot, callback) {\n            var selector = this.options.emailInputSelector;\n            var input    = this.container.find(selector);\n\n            callback(input.val());\n        },\n        'fetchBookingStreet': function(slot, callback) {\n            var selector = this.options.streetInputSelector;\n            var input    = this.container.find(selector);\n\n            callback(input.val());\n        },\n        'fetchBookingPostcode': function(slot, callback) {\n            var selector = this.options.postcodeInputSelector;\n            var input    = this.container.find(selector);\n\n            callback(input.val());\n        },\n        'fetchBookingCity': function(slot, callback) {\n            var selector = this.options.cityInputSelector;\n            var input    = this.container.find(selector);\n\n            callback(input.val());\n        },\n        'fetchBookingModes': function(slot, callback) {\n            var selector = this.options.modeInputSelector;\n            var inputs   = this.container.find(selector);\n\n            var modes = [];\n            $.each(inputs, function(index, input) {\n                input = $(input);\n                if (input.prop('checked')) {\n                    modes.push(input.val());\n                }\n            });\n\n            callback(modes);\n        },\n        'fetchBookingPlayerCount': function(slot, callback) {\n            var selector = this.options.playerCountInputSelector;\n            var input    = this.container.find(selector);\n\n            callback(input.val());\n        },\n        'fetchBookingPlayers': function(slot, callback) {\n            var selector = this.options.playersInputSelector;\n            var element  = this.container.find(selector);\n            var inputs   = element.find('input[name=\"tags\"]');\n\n            var players = [];\n            for (var index = 0; index<inputs.size(); index++) {\n                var input = $(inputs[index]);\n                players.push(input.val());\n            }\n\n            callback(players);\n        },\n        'fetchBookingExclusive': function(slot, callback) {\n            var selector = this.options.exclusiveInputSelector;\n            var input    = this.container.find(selector);\n\n            callback(input.prop('checked'));\n        },\n        'fetchBookingSlots': function(slot, callback) {\n            var selectionContainerSelector = this.options.successorsContainerInputSelector;\n            var selectionContainer         = this.container.find(selectionContainerSelector);\n            var inputs                     = selectionContainer.find('input');\n\n            var slots = [slot];\n\n            if (this.options.successorsSelectionMode == 'subsequent') {\n                for (var index = 0; index<inputs.size(); index++) {\n                    var input = $(inputs[index]);\n                    if (input.data('slot')) {\n                        slots.push(input.data('slot'));\n                    }\n                    if (input.prop('checked')) {\n                        break;\n                    }\n                }\n            }\n            else if (this.options.successorsSelectionMode == 'undetermined') {\n                for (var index = 0; index<inputs.size(); index++) {\n                    var input = $(inputs[index]);\n                    if (input.prop('checked') && input.data('slot')) {\n                        slots.push(input.data('slot'));\n                    }\n                }\n            }\n\n            callback(slots);\n        },\n        'fetchBookingNotes': function(slot, callback) {\n            var selector = this.options.notesInputSelector;\n            var input    = this.container.find(selector);\n\n            callback(input.val());\n        },\n\n        onSuccess: function(response, xhr) {\n            this.api.refresh();\n            alert('Die Buchung wurde durchgeführt.');\n        },\n\n        onFailure: function (error, xhr) {\n            if (error) {\n                alert(error);\n                return;\n            }\n\n            var json = JSON.parse(xhr.responseText);\n\n            if (json.status == 903) {\n                alert('Eine Buchung ist nicht möglich, der Zeitraum ist bereits ausgebucht.');\n            }\n            else if (json.status == 904) {\n                alert('Eine exklusive Buchung ist nicht möglich, weil in dem Zeitraum bereits gebucht wurde.');\n            }\n            else if (json.status == 905) {\n                alert('Bitte gib deinen Namen ein.');\n                var selector = this.options.nameInputSelector;\n                this.container.find(selector).focus();\n            }\n            else if (json.status == 906) {\n                alert('Bitte gib deine Handynummer ein.');\n                var selector = this.options.mobileInputSelector;\n                this.container.find(selector).focus();\n            }\n            else if (json.status == 907) {\n                alert('Bitte gib deine E-Mail ein.');\n                var selector = this.options.emailInputSelector;\n                this.container.find(selector).focus();\n            }\n            else if (json.status == 908) {\n                alert('Bitte gib deine Straße ein.');\n                var selector = this.options.streetInputSelector;\n                this.container.find(selector).focus();\n            }\n            else if (json.status == 909) {\n                alert('Bitte gib deine PLZ ein.');\n                var selector = this.options.postcodeInputSelector;\n                this.container.find(selector).focus();\n            }\n            else if (json.status == 910) {\n                alert('Bitte gib deine Stadt ein.');\n                var selector = this.options.cityInputSelector;\n                this.container.find(selector).focus();\n            }\n            else {\n                alert('Es ist ein Serverfehler aufgetreten, bitte versuche es später noch einmal.');\n            }\n        }\n    };\n\n    /**\n     * Create a new booking mask to integrate goboo booking system.\n     *\n     * @memberOf jQuery\n     * @access public\n     * @param object options\n     */\n    $.fn.gobooBookingMask = function (options) {\n        if (!goboo.env.adapter) {\n            throw 'You need to initialize the goboo environment first!';\n        }\n\n        var element = $(this[0]);\n        var templateOptions = {};\n        $.each(\n            {\n                'room': 'room',\n                'slot': 'slot',\n                'bookingMask': 'booking-mask',\n                'successorsSelectionMode': 'successors-selection-mode',\n                'startDateTimeFormat': 'start-datetime-format',\n                'endDateTimeFormat': 'end-datetime-format',\n                'timeFormat': 'date-format',\n                'durationDateTimeFormat': 'duration-time-format',\n                'playTimeDateTimeFormat': 'play-time-format',\n                'successorDateTimeFormat': 'successor-format',\n                'idSelector': 'id-selector',\n                'startDateTimeSelector': 'start-datetime-selector',\n                'endDateTimeSelector': 'end-datetime-selector',\n                'durationSelector': 'duration-selector',\n                'playTimeSelector': 'play-time-selector',\n                'capacitySelector': 'capacity-selector',\n                'attendanceSelector': 'attendance-selector',\n                'modesSelector': 'modes-selector',\n                'timeSelector': 'time-selector',\n                'durationDateTimeSelector': 'duration-datetime-selector',\n                'playTimeDateTimeSelector': 'play-time-datetime-selector',\n                'formInputSelector': 'form-input-selector',\n                'nameInputSelector': 'name-input-selector',\n                'mobileInputSelector': 'mobile-input-selector',\n                'emailInputSelector': 'email-input-selector',\n                'streetInputSelector': 'street-input-selector',\n                'postcodeInputSelector': 'postcode-input-selector',\n                'cityInputSelector': 'city-input-selector',\n                'modeInputSelector': 'mode-input-selector',\n                'playerCountInputSelector': 'player-count-input-selector',\n                'playersInputSelector': 'player-players-input-selector',\n                'exclusiveInputSelector': 'exclusive-input-selector',\n                'successorsLoaderActionSelector': 'successors-loader-selector',\n                'successorsContainerInputSelector': 'successors-selection-selector',\n                'notesInputSelector': 'player-notes-input-selector',\n                'bookActionSelector': 'book-action-selector'\n            },\n            function(option, key) {\n                var value = element.data('goboo-' + key);\n                if (value !== undefined && value !== null) {\n                    templateOptions[option] = value;\n                }\n            }\n        );\n\n        options = $.extend({}, $.gobooBookingMask.defaultOptions, options || {}, templateOptions);\n\n        new (function(container, options) {\n            var self = this;\n            self.container = container;\n            self.options = options;\n            self.currentSlot = null;\n            self.api = {\n                'options': options,\n                'setSlot': function (slot, room) {\n                    if (room !== undefined) {\n                        options.room = room;\n                    }\n                    options.slot = slot;\n                    self.loadSlot(options.slot);\n                },\n                'refresh': function() {\n                    self.loadSlot(options.slot);\n                }\n            };\n\n            self.loadSlot = function(slot) {\n                if (!slot) {\n                    self.options.slot = null;\n                    self.currentSlot = null;\n                    self.container\n                        .removeClass('goboo_loading')\n                        .addClass('goboo_no_slot');\n                    self.container.trigger('goboo:slot-details:change-slot', null);\n                }\n                else if (slot instanceof goboo.Slot) {\n                    self.options.slot = slot.getId();\n                    self.currentSlot = slot;\n                    options.render.call(self);\n                    self.container\n                        .removeClass('goboo_loading')\n                        .removeClass('goboo_no_slot');\n                    self.container.trigger('goboo:slot-details:change-slot', slot);\n                }\n                else {\n                    self.container.addClass('goboo_loading');\n                    goboo.env.adapter.getSlot(\n                        self.options.room,\n                        slot,\n                        function(slot) {\n                            self.loadSlot(slot);\n                        }\n                    );\n                }\n            };\n\n            container.data('goboo', self.api);\n\n            if (options.room && options.slot) {\n                self.loadSlot(options.slot);\n            }\n            self.container.removeClass('goboo_initializing');\n        })(element, options);\n\n        return this;\n    };\n})(jQuery);\n","/*\n * GoBoo - GET IT. BOOK IT. [http://goboo.de]\n *\n * (c) Tristan Lins <t.lins@goboo.de>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * jquery client for {@link http://goboo.de goboo - GET IT. BOOK IT}\n *\n * online booking system by karo media\n *\n * @module goboo/Client/jQuery\n * @copyright 2014 {@link mailto:t.lins@goboo.de Tristan Lins}\n * @license {@link http://opensource.org/licenses/MIT MIT}\n * @author Tristan Lins <t.lins@goboo.de>\n * @link http://goboo.de\n */\n\n(function ($) {\n    \"use strict\";\n\n    /**\n     * Helper function to extract hours \"hh\" from a time with format \"hhii\".\n     *\n     * @param time\n     * @returns {int}\n     */\n    function extractHours(time) {\n        return parseInt((time / 100) % 100);\n    }\n\n    /**\n     * Helper function to extract minutes \"ii\" from a time with format \"hhii\".\n     *\n     * @param time\n     * @returns {int}\n     */\n    function extractMinutes(time) {\n        return parseInt(time % 100);\n    }\n\n    var now = new Date();\n\n    $.gobooCalendar = {};\n    $.gobooCalendar.defaultOptions = {\n        /** id of room */\n        'room': '',\n        /** the time span the calendar will display */\n        'timeSpan': '1week',\n        /** the start time the calendar will begin */\n        'startTime': 'week',\n        /** the first day of week, only used to calculate the week start time */\n        'startOfWeek': 0,\n\n        /** count of minutes to create a time indicator */\n        'timesSpan': 60,\n        'timesFormat': '{time}',\n        'timesDateFormat': 'hh:ii',\n\n        /** day date format */\n        'dayDateFormat': 'dd.',\n        /** move the time span of a day */\n        'dayStartOffset': 0,\n        /** predefined start time of the day */\n        'dayStart': false,\n        /** predefined end time of the day */\n        'dayEnd': false,\n        /** current date format */\n        'currentDateFormat': '{from} - {until}',\n        /** current date format for from date */\n        'currentDateFromFormat': 'dd.',\n        /** current date format for from date */\n        'currentDateFromMonthFormat': 'dd.',\n        /** current date format for until date */\n        'currentDateUntilFormat': 'dd. MM',\n        /** current date format for until date */\n        'currentDateUntilMonthFormat': 'dd. MM',\n\n        /** selector to previous button element */\n        'previousButtonSelector': '.goboo_date_selector .goboo_previous',\n        /** selector to next button element */\n        'nextButtonSelector': '.goboo_date_selector .goboo_next',\n        /** selector to current date element */\n        'currentDateSelector': '.goboo_date_selector .goboo_current_date',\n        /** selector to times container element */\n        'timesContainerSelector': '.goboo_calendar .goboo_times',\n        /** selector to days container element */\n        'daysContainerSelector': '.goboo_calendar .goboo_days',\n\n        /** factory to create a time span element */\n        'timeSpanFactory': function(container, time, isFirst, isLast) {\n            var self = this;\n            var dateFormat = container.data('goboo-date-format') || self.options.timesDateFormat;\n            var format = container.data('goboo-format') || self.options.timesFormat;\n            var date = $.formatDateTime(dateFormat, time);\n            var date = format.replace('{time}', date);\n            var element = $('<div></div>')\n                .addClass('goboo_time-' + $.formatDateTime('hhii', time))\n                .addClass('goboo_time_span_time_' + $.formatDateTime('hhii', time))\n                .addClass('goboo_time_span_duration_' + self.options.timesSpan)\n                .addClass('goboo_time_span')\n                .html(date);\n            if (isFirst) {\n                element.addClass('goboo_time_span_first');\n            }\n            if (isLast) {\n                element.addClass('goboo_time_span_last');\n            }\n            return element;\n        },\n        /** factory to create the current date */\n        'currentDateFactory': function(startDate, endDate, currentDateContainer) {\n            var self = this;\n            var currentDateFormat = currentDateContainer.data('goboo-format') || self.options.currentDateFormat;\n            var currentDateFromFormat = currentDateContainer.data('goboo-from-format') || self.options.currentDateFromFormat;\n            var currentDateFromMonthFormat = currentDateContainer.data('goboo-from-month-format') || self.options.currentDateFromMonthFormat;\n            var currentDateUntilFormat = currentDateContainer.data('goboo-until-format') || self.options.currentDateUntilFormat;\n            var currentDateUntilMonthFormat = currentDateContainer.data('goboo-until-month-format') || self.options.currentDateUntilMonthFormat;\n\n            endDate = new Date(endDate);\n            endDate.setDate(endDate.getDate() - 1);\n            var currentDateFrom = startDate.getMonth() != endDate.getMonth()\n                ? $.formatDateTime(currentDateFromMonthFormat, startDate)\n                : $.formatDateTime(currentDateFromFormat, startDate);\n            var currentDateUntil = startDate.getMonth() != endDate.getMonth()\n                ? $.formatDateTime(currentDateUntilMonthFormat, endDate)\n                : $.formatDateTime(currentDateUntilFormat, endDate);\n\n            var currentDate = currentDateFormat\n                .replace('{from}', currentDateFrom)\n                .replace('{until}', currentDateUntil);\n            return $('<span></span>').text(currentDate);\n        },\n        /** factory to create a day container, that contains all the day records */\n        'dayContainerFactory': function(date) {\n            var self = this;\n            var dayName = $('<div></div>')\n                .addClass('goboo_day_name')\n                .html($.formatDateTime(self.container.data('goboo-day-date-format') || self.options.dayDateFormat, date));\n\n            var day = $.formatDateTime('yymmdd', date);\n            var dayWithoutYear = $.formatDateTime('mmdd', date);\n            var dayOfMonth = $.formatDateTime('dd', date);\n            var dayOfWeek = date.getDay();\n            return $('<div></div>')\n                .addClass('goboo_day_' + day)\n                .addClass('goboo_day_of_year_' + dayWithoutYear)\n                .addClass('goboo_day_of_month_' + dayOfMonth)\n                .addClass('goboo_day_of_week_' + dayOfWeek)\n                .addClass('goboo_day')\n                .append(dayName);\n        },\n        /** factory to create a slot button */\n        'slotButtonFactory': function(slot) {\n            var self = this;\n            var capacity = slot.getCapacity();\n            var attendance = slot.getAttendance();\n            var locked = slot.isLocked();\n            var button = $('<a></a>')\n                .attr('id', 'goboo_slot_' + slot.getId())\n                .attr('href', '#goboo_slot_' + slot.getId())\n                .addClass('goboo_slot_button');\n            if (locked) {\n                button.addClass('goboo_slot_locked');\n            }\n            var players = $('<span></span>')\n                .addClass('goboo_slot_players')\n                .appendTo(button);\n\n            for (var i=1; i<=capacity; i++) {\n                $('<span></span>')\n                    .addClass('goboo_slot_player_' + i)\n                    .addClass('goboo_slot_player')\n                    .addClass((locked || i <= attendance) ? 'goboo_slot_player_used' : 'goboo_slot_player_free')\n                    .appendTo(players);\n            }\n\n            if (locked || attendance >= capacity) {\n                button.addClass('goboo_slot_full');\n            }\n            if (attendance == 0) {\n                button.addClass('goboo_slot_empty');\n            }\n\n            button.click(function(e) {\n                e.preventDefault();\n                self.options.showSlotDetails.call(self, slot);\n            });\n\n            return button;\n        },\n        /** factory to create a slot dummy */\n        'slotDummyFactory': function(slot) {\n            var capacity = slot.getCapacity();\n            var attendance = slot.getAttendance();\n            var locked = slot.isLocked();\n            var button = $('<span></span>')\n                .attr('id', 'goboo_slot_' + slot.getId())\n                .attr('href', '#goboo_slot_' + slot.getId())\n                .addClass('goboo_slot_button');\n            if (locked) {\n                button.addClass('goboo_slot_locked');\n            }\n            var players = $('<span></span>')\n                .addClass('goboo_slot_players')\n                .appendTo(button);\n\n            for (var i=1; i<=capacity; i++) {\n                $('<span></span>')\n                    .addClass('goboo_slot_player_' + i)\n                    .addClass('goboo_slot_player')\n                    .addClass((locked || i <= attendance) ? 'goboo_slot_player_used' : 'goboo_slot_player_free')\n                    .appendTo(players);\n            }\n\n            if (locked || attendance >= capacity) {\n                button.addClass('goboo_slot_full');\n            }\n            else if (attendance == 0) {\n                button.addClass('goboo_slot_empty');\n            }\n\n            return button;\n        },\n        /** factory to create the slot container */\n        'slotContainerFactory': function(slot) {\n            var locked = slot.isLocked();\n\n            var time = $.formatDateTime('hhii', slot.getStartDateTime());\n            var container = $('<div></div>')\n                .addClass('goboo_time_' + time)\n                .addClass('goboo_slot_time_' + time)\n                .addClass('goboo_slot_duration_' + slot.getDuration())\n                .addClass('goboo_slot');\n\n            if (locked) {\n                container.addClass('goboo_slot_locked');\n            }\n            else {\n                container.addClass('goboo_slot_attendance_' + slot.getAttendance());\n            }\n\n            return container;\n        },\n        /** factory to create the pause element */\n        'pauseFactory': function(pause, onDayStart, onDayEnd) {\n            var element = $('<div></div>')\n                .addClass('goboo_pause_' + pause)\n                .addClass('goboo_pause');\n            if (onDayStart) {\n                element.addClass('goboo_pause_begin');\n            }\n            else if (onDayEnd) {\n                element.addClass('goboo_pause_end');\n            }\n            else {\n                element.addClass('goboo_pause_between');\n            }\n            return element;\n        },\n        /** factory to create an element, that indicate that there are no bookable slots */\n        'emptyMessageFactory': function(time) {\n            return $('<div></div>')\n                .addClass('goboo_empty')\n                .addClass('goboo_empty_time_' + time);\n        },\n\n        'showSlotDetails': function(slot) {\n            alert('You must define the showSlotDetails(slot) function!');\n        },\n\n        'renderDay': function(items, dayStartTime, dayEndTime) {\n            var self         = this;\n            var dayContainer = self.options.dayContainerFactory.call(self, items[0].time);\n            var previousItem = null;\n\n            $.each(items, function(index, item) {\n                var slot      = item.slot;\n                var startTime = slot.getStartDateTime();\n\n                dayStartTime.setDate(startTime.getDate());\n                dayStartTime.setMonth(startTime.getMonth());\n                dayStartTime.setYear(startTime.getFullYear());\n\n                dayEndTime.setDate(startTime.getDate());\n                dayEndTime.setMonth(startTime.getMonth());\n                dayEndTime.setYear(startTime.getFullYear());\n\n                if (dayEndTime.getTime() <= dayStartTime.getTime()) {\n                    dayEndTime.setDate(dayEndTime.getDate() + 1);\n                }\n\n                var timeOffset = 0;\n                if (!previousItem) {\n                    timeOffset = startTime.getTime() - dayStartTime.getTime();\n                }\n                if (previousItem) {\n                    timeOffset = startTime.getTime() - previousItem.slot.getEndDateTime().getTime();\n                }\n                if (timeOffset > 0) {\n                    var pauseElement = self.options.pauseFactory.call(self, timeOffset / 60000, false, true);\n                    dayContainer.append(pauseElement);\n                }\n\n                var slotButton;\n                if (!slot.isLocked() && slot.getStartDateTime().getTime() > now.getTime()) {\n                    slotButton = self.options.slotButtonFactory.call(self, slot);\n                }\n                else {\n                    slotButton = self.options.slotDummyFactory.call(self, slot);\n                }\n\n                var slotElement = self.options.slotContainerFactory.call(self, slot);\n                slotElement.append(slotButton);\n                dayContainer.append(slotElement);\n\n                previousItem = item;\n            });\n\n            var endTime = previousItem.slot.getEndDateTime();\n            var timeOffset = dayEndTime.getTime() - endTime.getTime();\n            if (timeOffset > 0 && timeOffset < 86400000) {\n                var pauseElement = self.options.pauseFactory.call(self, timeOffset / 60000, false, true);\n                dayContainer.append(pauseElement);\n            }\n\n            return dayContainer;\n        },\n\n        /** poll the calendar */\n        'polling': false\n    };\n\n    /**\n     * Create a new booking calendar to integrate goboo booking system.\n     *\n     * @memberOf jQuery\n     * @access public\n     * @param object options\n     */\n    $.fn.gobooCalendar = function (options) {\n        if (!goboo.env.adapter) {\n            throw 'You need to initialize the goboo environment first!';\n        }\n\n        var element = $(this[0]);\n        var templateOptions = {};\n        $.each(\n            {\n                'room': 'room',\n                'timeSpan': 'time-span',\n                'startTime': 'start-time',\n                'startOfWeek': 'start-of-week',\n                'timesSpan': 'times-span',\n                'timesFormat': 'times-format',\n                'timesDateFormat': 'times-date-format',\n                'dayDateFormat': 'day-date-format',\n                'dayStartOffset': 'day-start-offset',\n                'dayStart': 'day-start',\n                'dayEnd': 'day-end',\n                'currentDateFormat': 'current-date-format',\n                'currentDateFromFormat': 'current-date-from-format',\n                'currentDateFromMonthFormat': 'current-date-from-month-format',\n                'currentDateUntilFormat': 'current-date-until-format',\n                'currentDateUntilMonthFormat': 'current-date-until-month-format',\n                'previousButtonSelector': 'previous-button-selector',\n                'nextButtonSelector': 'next-button-selector',\n                'currentDateSelector': 'current-date-selector',\n                'timesContainerSelector': 'times-container-selector',\n                'daysContainerSelector': 'days-container-selector'\n            },\n            function(option, key) {\n                var value = element.data('goboo-' + key);\n                if (value !== undefined && value !== null) {\n                    templateOptions[option] = value;\n                }\n            }\n        );\n\n        var options = $.extend({}, $.gobooCalendar.defaultOptions, options || {}, templateOptions);\n\n        if (!options.room) {\n            throw 'Room ID is missing for calendar!';\n        }\n\n        function getWeekNumber(d) {\n            // Copy date so don't modify original\n            d = new Date(d);\n            d.setHours(0,0,0);\n            // Set to nearest Thursday: current date + 4 - current day number\n            // Make Sunday's day number 7\n            d.setDate(d.getDate() + 4 - (d.getDay()||7));\n            // Get first day of year\n            var yearStart = new Date(d.getFullYear(),0,1);\n            // Calculate full weeks to nearest Thursday\n            var weekNo = Math.ceil(( ( (d - yearStart) / 86400000) + 1)/7)\n            // Return array of year and week number\n            return [d.getFullYear(), weekNo];\n        }\n\n        new (function(container, options) {\n            var self = this;\n            self.container = container;\n            self.options = options;\n\n            self.api = {\n                'options': options,\n                'refresh': function() {\n                    self.updateSlots();\n                }\n            };\n\n            // parse and evaluate time span\n            var timespanRegexp = /^(\\d+)(hour|day|week|month|year)$/;\n            self.timespanMatch = timespanRegexp.exec(options.timeSpan);\n            if (!self.timespanMatch) {\n                throw 'The time span ' + options.timeSpan + ' is invalid!';\n            }\n\n            // determinate the start time of the calendar\n            self.currentStartTime = new Date();\n            self.currentStartTime.setHours(0);\n            self.currentStartTime.setMinutes(0);\n            self.currentStartTime.setSeconds(0);\n\n            if (options.dayStartOffset) {\n                self.currentStartTime.setHours(options.dayStartOffset);\n            }\n\n            var matches = /(month|week|day)(\\+|\\-|=|>=)(\\d+)/.exec(options.startTime);\n            if (matches) {\n                options.startTime = matches[1];\n                options.startTimeOffset = {\n                    comparator: matches[2],\n                    value: parseInt(matches[3])\n                };\n            }\n            else {\n                options.startTimeOffset = false;\n            }\n\n            switch (options.startTime) {\n                case 'month':\n                    self.currentStartTime.setDate(1);\n\n                    if (options.startTimeOffset) {\n                        var value = parseInt(options.startTimeOffset.value);\n                        switch (options.startTimeOffset.comparator) {\n                            case '+':\n                                self.currentStartTime.setMonth(\n                                    self.currentStartTime.getMonth() + value\n                                );\n                                break;\n                            case '-':\n                                self.currentStartTime.setMonth(\n                                    self.currentStartTime.getMonth() - value\n                                );\n                                break;\n                            case '=':\n                                self.currentStartTime.setMonth(value);\n                                break;\n                            case '>=':\n                                if (value > self.currentStartTime.getMonth()) {\n                                    self.currentStartTime.setMonth(value);\n                                }\n                                break;\n                        }\n                    }\n                    break;\n                case 'week':\n                    var dow = self.currentStartTime.getDay();\n                    var days = dow - self.options.startOfWeek;\n                    while (days < 0) {\n                        days += 7;\n                    }\n                    if (days) {\n                        self.currentStartTime.setDate(self.currentStartTime.getDate() - days);\n                    }\n\n                    if (options.startTimeOffset) {\n                        var value = options.startTimeOffset.value;\n                        switch (options.startTimeOffset.comparator) {\n                            case '+':\n                                self.currentStartTime.setDate(\n                                    self.currentStartTime.getDate() + (7 * value)\n                                );\n                                break;\n                            case '-':\n                                self.currentStartTime.setDate(\n                                    self.currentStartTime.getDate() - (7 * value)\n                                );\n                                break;\n                            case '=':\n                                var woy = getWeekNumber(self.currentStartTime);\n                                self.currentStartTime.setDate(\n                                    self.currentStartTime.getDate() + (7 * (value - woy[1]))\n                                );\n                                break;\n                            case '>=':\n                                var woy = getWeekNumber(self.currentStartTime);\n                                if (\n                                    self.currentStartTime.getFullYear() <= woy[0] &&\n                                    value > woy[1]\n                                ) {\n                                    self.currentStartTime.setDate(\n                                        self.currentStartTime.getDate() + (7 * (value - woy[1]))\n                                    );\n                                }\n                                break;\n                        }\n                    }\n                    break;\n                case 'day':\n                    if (options.startTimeOffset) {\n                        var value = options.startTimeOffset.value;\n                        switch (options.startTimeOffset.comparator) {\n                            case '+':\n                                self.currentStartTime.setDate(\n                                    self.currentStartTime.getDate() + value\n                                );\n                                break;\n                            case '-':\n                                self.currentStartTime.setDate(\n                                    self.currentStartTime.getDate() - value\n                                );\n                                break;\n                            case '=':\n                                self.currentStartTime.setDate(value);\n                                break;\n                            case '>=':\n                                if (value > self.currentStartTime.getDate()) {\n                                    self.currentStartTime.setDate(value);\n                                }\n                                break;\n                        }\n                    }\n                    break;\n                default:\n                    throw 'Start time ' + self.options.startTime + ' is not known!';\n            }\n\n            self.minStartTime = new Date(self.currentStartTime);\n\n            var dayStartTime = new Date();\n            dayStartTime.setHours(23);\n            dayStartTime.setMinutes(59);\n            dayStartTime.setSeconds(0);\n            dayStartTime.setMilliseconds(0);\n\n            var dayEndTime = new Date();\n            dayEndTime.setHours(0);\n            dayEndTime.setMinutes(0);\n            dayEndTime.setSeconds(0);\n            dayEndTime.setMilliseconds(0);\n\n            self.currentDayTime = {\n                start: dayStartTime,\n                end: dayEndTime\n            };\n\n            self.increaseDate = function(date) {\n                switch (self.timespanMatch[2]) {\n                    case 'hour':\n                        date.setHours(date.getHours() + 1);\n                        break;\n                    case 'day':\n                        date.setDate(date.getDate() + 1);\n                        break;\n                    case 'week':\n                        date.setDate(date.getDate() + 7);\n                        break;\n                    case 'month':\n                        date.setMonth(date.getMonth() + 1);\n                        break;\n                    case 'year':\n                        date.setFullYear(date.getFullYear() + 1);\n                        break;\n                }\n                return date;\n            }\n\n            self.decreaseDate = function(date) {\n                switch (self.timespanMatch[2]) {\n                    case 'hour':\n                        date.setHours(date.getHours() - 1);\n                        break;\n                    case 'day':\n                        date.setDate(date.getDate() - 1);\n                        break;\n                    case 'week':\n                        date.setDate(date.getDate() - 7);\n                        break;\n                    case 'month':\n                        date.setMonth(date.getMonth() - 1);\n                        break;\n                    case 'year':\n                        date.setFullYear(date.getFullYear() - 1);\n                        break;\n                }\n                return date;\n            }\n\n            /**\n             * Map the slots per day, in relation to the day start offset.\n             *\n             * @param {goboo.Slot[]} slots\n             *\n             * @return {Array} Return an array with items { slot: ..., time: ..., rel: ... },\n             *                 where slot is the goboo.Slot object,\n             *                 time is the slot start time and\n             *                 rel is the relative slot start time, depending on the day start offset.\n             */\n            self.mapSlotsPerDay = function(slots) {\n                var slotsPerDay = {};\n\n                for (var i=0; i<slots.length; i++) {\n                    var slot = slots[i];\n                    var startTime = slot.getStartDateTime();\n                    var relativeTime;\n\n                    if (self.options.dayStartOffset) {\n                        relativeTime = new Date(startTime);\n                        relativeTime.setHours(relativeTime.getHours() - self.options.dayStartOffset);\n                    }\n                    else {\n                        relativeTime = startTime;\n                    }\n\n                    var day  = $.formatDateTime('yymmdd', relativeTime);\n\n                    if (!slotsPerDay[day]) {\n                        slotsPerDay[day] = [];\n                    }\n\n                    slotsPerDay[day].push(\n                        {\n                            slot: slot,\n                            time: startTime,\n                            rel: relativeTime\n                        }\n                    );\n                }\n\n                return slotsPerDay;\n            };\n\n            self.getRequiredDays = function(startDate, endDate) {\n                var requiredDate = new Date(startDate);\n                var requiredDays = [];\n\n                do {\n                    requiredDays.push({\n                        numeric: $.formatDateTime('yymmdd', requiredDate),\n                        date: new Date(requiredDate)\n                    });\n                    requiredDate.setDate(requiredDate.getDate() + 1);\n                }\n                while (requiredDate.getTime() < endDate.getTime());\n\n                return requiredDays;\n            };\n\n            self.generateTimes = function(slotsPerDay) {\n                var minTime = null;\n                var maxTime = null;\n\n                if (self.options.dayStart !== false && self.options.dayEnd !== false) {\n                    var time = self.options.dayStart.toString().split(':');\n\n                    minTime = new Date();\n                    minTime.setFullYear(2000);\n                    minTime.setMonth(0);\n                    minTime.setDate(1);\n                    minTime.setHours(parseInt(time[0]));\n                    minTime.setMinutes(time.length > 1 ? parseInt(time[1]) : 0);\n                    minTime.setSeconds(0);\n                    minTime.setMilliseconds(0);\n\n                    time = self.options.dayEnd.toString().split(':');\n\n                    maxTime = new Date();\n                    maxTime.setFullYear(2000);\n                    maxTime.setMonth(0);\n                    maxTime.setDate(1);\n                    maxTime.setHours(parseInt(time[0]));\n                    maxTime.setMinutes(time.length > 1 ? parseInt(time[1]) : 0);\n                    maxTime.setSeconds(0);\n                    maxTime.setMilliseconds(0);\n\n                    if (maxTime.getTime() < minTime.getTime()) {\n                        maxTime.setDate(2);\n                    }\n                }\n                else {\n                    $.each(slotsPerDay, function(day, items) {\n                        var start = null;\n                        var end   = null;\n\n                        $.each(items, function(index, item) {\n                            if (!start || item.time.getTime() < start.getTime()) {\n                                start = item.time;\n                            }\n                            if (!end || item.slot.getEndDateTime().getTime() > end.getTime()) {\n                                end = item.slot.getEndDateTime();\n                            }\n                        });\n\n                        var currentMinTime = new Date(start);\n                        currentMinTime.setFullYear(2000);\n                        currentMinTime.setMonth(0);\n                        currentMinTime.setDate(1);\n\n                        var currentMaxTime = new Date(end);\n                        currentMaxTime.setFullYear(2000);\n                        currentMaxTime.setMonth(0);\n                        currentMaxTime.setDate(1);\n\n                        if (currentMaxTime.getTime() < currentMinTime.getTime()) {\n                            currentMaxTime.setDate(2);\n                        }\n\n                        if (!minTime || currentMinTime.getTime() < minTime.getTime()) {\n                            minTime = currentMinTime;\n                        }\n                        if (!maxTime || currentMaxTime.getTime() > maxTime.getTime()) {\n                            maxTime = currentMaxTime;\n                        }\n                    });\n\n                    if (!maxTime) {\n                        maxTime = new Date();\n                    }\n                    if (!minTime) {\n                        minTime = new Date();\n                    }\n\n                    if (self.options.dayStart !== false && self.options.dayStart) {\n                        var time = self.options.dayStart.toString().split(':');\n\n                        minTime.setFullYear(2000);\n                        minTime.setMonth(0);\n                        minTime.setDate(1);\n                        minTime.setHours(parseInt(time[0]));\n                        minTime.setMinutes(time.length > 1 ? parseInt(time[1]) : 0);\n                        minTime.setSeconds(0);\n                        minTime.setMilliseconds(0);\n                    }\n                    if (self.options.dayEnd !== false && self.options.dayEnd) {\n                        var time = self.options.dayEnd.toString().split(':');\n\n                        maxTime.setFullYear(2000);\n                        maxTime.setMonth(0);\n                        maxTime.setDate(1);\n                        maxTime.setHours(parseInt(time[0]));\n                        maxTime.setMinutes(time.length > 1 ? parseInt(time[1]) : 0);\n                        maxTime.setSeconds(0);\n                        maxTime.setMilliseconds(0);\n                    }\n\n                    if (maxTime.getTime() < minTime.getTime()) {\n                        maxTime.setDate(2);\n                    }\n                }\n\n                if (\n                    self.options.timeSpanFactory &&\n                    (\n                        !self.currentDayTime ||\n                        (\n                            minTime && maxTime &&\n                            (\n                                self.currentDayTime.start.getTime() != minTime.getTime() ||\n                                self.currentDayTime.end.getTime() != maxTime.getTime()\n                            )\n                        )\n                    )\n                ) {\n                    var container = self.container.find(options.timesContainerSelector);\n                    if (container.length) {\n                        container.empty();\n\n                        var time = new Date(minTime);\n\n                        var times = Math.ceil(1440 / options.timesSpan);\n                        while (time.getTime() < maxTime.getTime()) {\n                            var nextTime = new Date(time);\n                            nextTime.setTime(time.getTime() + (1000 * 60 * options.timesSpan));\n\n                            for (var j=0; j<container.length; j++) {\n                                var singleContainer = $(container[j]);\n                                var element = self.options.timeSpanFactory.call(\n                                    self,\n                                    singleContainer, time, time.getTime() <= minTime.getTime(), nextTime.getTime() >= maxTime.getTime()\n                                );\n                                singleContainer.append(element);\n                            }\n\n                            time.setTime(time.getTime() + (1000 * 60 * options.timesSpan));\n                        }\n                    }\n\n                    self.currentDayTime = {\n                        start: minTime,\n                        end: maxTime\n                    }\n                }\n\n                return self.currentDayTime;\n            };\n\n            self.updateSlots = function() {\n                now = new Date();\n                var startDate = self.currentStartTime;\n                var endDate = self.increaseDate(new Date(self.currentStartTime));\n\n                goboo.env.adapter.listSlots(\n                    self.options.room,\n                    startDate,\n                    endDate,\n                    function(slots) {\n                        var slotsPerDay     = self.mapSlotsPerDay(slots);\n                        var dayStartEndTime = self.generateTimes(slotsPerDay);\n                        var requiredDays    = self.getRequiredDays(startDate, endDate);\n\n                        var currentDateContainer = self.container.find(options.currentDateSelector);\n                        var daysContainer = self.container.find(options.daysContainerSelector);\n                        daysContainer.empty();\n\n                        var currentDate = self.options.currentDateFactory.call(self, startDate, endDate, currentDateContainer);\n                        currentDateContainer.empty().append(currentDate);\n\n                        var dayStartTime = new Date(dayStartEndTime.start);\n                        var dayEndTime   = new Date(dayStartEndTime.end);\n\n                        if (slots && slots.length) {\n                            var dayCount = 0;\n                            var today    = $.formatDateTime('yymmdd', new Date());\n\n                            $.each(slotsPerDay, function(day, items) {\n                                while (requiredDays.length && requiredDays[0].numeric < day) {\n                                    var requiredDay = requiredDays.shift();\n\n                                    dayStartTime.setDate(requiredDay.date.getDate());\n                                    dayStartTime.setMonth(requiredDay.date.getMonth());\n                                    dayStartTime.setFullYear(requiredDay.date.getFullYear());\n\n                                    dayEndTime.setDate(requiredDay.date.getDate());\n                                    dayEndTime.setMonth(requiredDay.date.getMonth());\n                                    dayEndTime.setFullYear(requiredDay.date.getFullYear());\n\n                                    if (dayEndTime.getTime() < dayStartTime.getTime()) {\n                                        dayEndTime.setDate(dayEndTime.getDate() + 1);\n                                    }\n\n                                    var dayContainer = self.options.dayContainerFactory.call(self, requiredDay.date);\n                                    daysContainer.append(dayContainer);\n\n                                    if ($.formatDateTime('yymmdd', dayStartTime) == today) {\n                                        dayContainer.addClass('today');\n                                    }\n\n                                    var pauseElement = self.options.pauseFactory.call(self, (dayEndTime.getTime() - dayStartTime.getTime()) / 60000, true, true);\n                                    dayContainer.append(pauseElement);\n\n                                    dayCount ++;\n                                }\n\n                                if (requiredDays.length && requiredDays[0].numeric == day) {\n                                    requiredDays.shift();\n                                }\n\n                                var dayContainer = self.options.renderDay.call(self, items, dayStartTime, dayEndTime);\n                                daysContainer.append(dayContainer);\n                                dayCount ++;\n\n                                if (day == today) {\n                                    dayContainer.addClass('today');\n                                }\n                            });\n\n                            while (requiredDays.length) {\n                                var requiredDay = requiredDays.shift();\n\n                                dayStartTime.setDate(requiredDay.date.getDate());\n                                dayStartTime.setMonth(requiredDay.date.getMonth());\n                                dayStartTime.setFullYear(requiredDay.date.getFullYear());\n\n                                dayEndTime.setDate(requiredDay.date.getDate());\n                                dayEndTime.setMonth(requiredDay.date.getMonth());\n                                dayEndTime.setFullYear(requiredDay.date.getFullYear());\n\n                                if (dayEndTime.getTime() < dayStartTime.getTime()) {\n                                    dayEndTime.setDate(dayEndTime.getDate() + 1);\n                                }\n\n                                var dayContainer = self.options.dayContainerFactory.call(self, requiredDay.date);\n                                daysContainer.append(dayContainer);\n\n                                if ($.formatDateTime('yymmdd', dayStartTime) == today) {\n                                    dayContainer.addClass('today');\n                                }\n\n                                var pauseElement = self.options.pauseFactory.call(self, (dayEndTime.getTime() - dayStartTime.getTime()) / 60000, true, true);\n                                dayContainer.append(pauseElement);\n\n                                dayCount ++;\n                            }\n\n                            var classes = (daysContainer.attr('class') || '').split(/\\s+/);\n                            classes = classes.filter(function(cssClass) {\n                                return !/^goboo_day_count_\\d+$/.test(cssClass);\n                            });\n                            classes.push('goboo_day_count_' + dayCount);\n                            daysContainer.attr('class', classes.join(' '));\n                        }\n                        else {\n                            daysContainer.append(self.options.emptyMessageFactory((dayEndTime - dayStartTime) / 1000));\n                        }\n\n                        self.container.trigger('goboo:slots:update', slots);\n                    }\n                );\n            }\n\n            self.updateSlotsDetails = function() {\n\n            };\n\n            self.previousButton = self.container.find(self.options.previousButtonSelector);\n            self.previousButton.addClass('goboo_button_disabled');\n            self.previousButton.click(function() {\n                if (self.currentStartTime.getTime() <= self.minStartTime.getTime()) {\n                    return false;\n                }\n                self.decreaseDate(self.currentStartTime);\n                self.updateSlots();\n                if (self.currentStartTime.getTime() <= self.minStartTime.getTime()) {\n                    self.previousButton.addClass('goboo_button_disabled');\n                }\n                return false;\n            });\n\n            self.nextButton = self.container.find(self.options.nextButtonSelector);\n            self.nextButton.click(function() {\n                self.increaseDate(self.currentStartTime);\n                self.updateSlots();\n                self.previousButton.removeClass('goboo_button_disabled');\n                return false;\n            });\n\n            var initListener = function() {\n                self.container\n                    .removeClass('goboo_initializing')\n                    .addClass('goboo_calendar_ready')\n                    .off('goboo.slots-update', initListener);\n            }\n            self.container.on('goboo:slots:update', initListener);\n\n            self.updateSlots();\n\n            if (self.options.polling !== false) {\n                setInterval(\n                    function() {\n                        self.updateSlotsDetails();\n                    },\n                    self.options.polling * 1000\n                );\n            }\n\n            container.data('goboo', self.api);\n        })(element, options);\n\n        return this;\n    };\n})(jQuery);\n"],"sourceRoot":"../../sources/javascripts"}